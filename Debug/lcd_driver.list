
lcd_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029f4  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000974  08002b8c  08002b8c  00003b8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003500  08003500  00005064  2**0
                  CONTENTS
  4 .ARM          00000008  08003500  08003500  00004500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003508  08003508  00005064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003508  08003508  00004508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800350c  0800350c  0000450c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08003510  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  20000064  08003574  00005064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000228  08003574  00005228  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006a8b  00000000  00000000  00005094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016a2  00000000  00000000  0000bb1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000700  00000000  00000000  0000d1c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000158f0  00000000  00000000  0000d8c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000085f2  00000000  00000000  000231b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000852f2  00000000  00000000  0002b7aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  000b0a9c  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000520  00000000  00000000  000b0adf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001e30  00000000  00000000  000b1000  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000b2e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000064 	.word	0x20000064
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002b74 	.word	0x08002b74

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000068 	.word	0x20000068
 80001d4:	08002b74 	.word	0x08002b74

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f001 f820 	bl	8001510 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f80e 	bl	80004f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 f8ac 	bl	8000630 <MX_GPIO_Init>
  MX_SPI1_Init();
 80004d8:	f000 f872 	bl	80005c0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  ST7735_Init();
 80004dc:	f000 fa0a 	bl	80008f4 <ST7735_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ST7735_Test();
 80004e0:	f000 fd1e 	bl	8000f20 <ST7735_Test>
	  HAL_Delay(200);
 80004e4:	20c8      	movs	r0, #200	@ 0xc8
 80004e6:	f001 f885 	bl	80015f4 <HAL_Delay>
	  ST7735_Test();
 80004ea:	bf00      	nop
 80004ec:	e7f8      	b.n	80004e0 <main+0x18>
	...

080004f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b094      	sub	sp, #80	@ 0x50
 80004f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f6:	f107 0320 	add.w	r3, r7, #32
 80004fa:	2230      	movs	r2, #48	@ 0x30
 80004fc:	2100      	movs	r1, #0
 80004fe:	4618      	mov	r0, r3
 8000500:	f002 faaa 	bl	8002a58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000504:	f107 030c 	add.w	r3, r7, #12
 8000508:	2200      	movs	r2, #0
 800050a:	601a      	str	r2, [r3, #0]
 800050c:	605a      	str	r2, [r3, #4]
 800050e:	609a      	str	r2, [r3, #8]
 8000510:	60da      	str	r2, [r3, #12]
 8000512:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000514:	2300      	movs	r3, #0
 8000516:	60bb      	str	r3, [r7, #8]
 8000518:	4b27      	ldr	r3, [pc, #156]	@ (80005b8 <SystemClock_Config+0xc8>)
 800051a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800051c:	4a26      	ldr	r2, [pc, #152]	@ (80005b8 <SystemClock_Config+0xc8>)
 800051e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000522:	6413      	str	r3, [r2, #64]	@ 0x40
 8000524:	4b24      	ldr	r3, [pc, #144]	@ (80005b8 <SystemClock_Config+0xc8>)
 8000526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000528:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800052c:	60bb      	str	r3, [r7, #8]
 800052e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000530:	2300      	movs	r3, #0
 8000532:	607b      	str	r3, [r7, #4]
 8000534:	4b21      	ldr	r3, [pc, #132]	@ (80005bc <SystemClock_Config+0xcc>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4a20      	ldr	r2, [pc, #128]	@ (80005bc <SystemClock_Config+0xcc>)
 800053a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800053e:	6013      	str	r3, [r2, #0]
 8000540:	4b1e      	ldr	r3, [pc, #120]	@ (80005bc <SystemClock_Config+0xcc>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000548:	607b      	str	r3, [r7, #4]
 800054a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800054c:	2301      	movs	r3, #1
 800054e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000550:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000554:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000556:	2302      	movs	r3, #2
 8000558:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800055a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800055e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000560:	230c      	movs	r3, #12
 8000562:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000564:	2360      	movs	r3, #96	@ 0x60
 8000566:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000568:	2302      	movs	r3, #2
 800056a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800056c:	2304      	movs	r3, #4
 800056e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000570:	f107 0320 	add.w	r3, r7, #32
 8000574:	4618      	mov	r0, r3
 8000576:	f001 fae5 	bl	8001b44 <HAL_RCC_OscConfig>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000580:	f000 f8cc 	bl	800071c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000584:	230f      	movs	r3, #15
 8000586:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000588:	2302      	movs	r3, #2
 800058a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800058c:	2300      	movs	r3, #0
 800058e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000590:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000594:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000596:	2300      	movs	r3, #0
 8000598:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800059a:	f107 030c 	add.w	r3, r7, #12
 800059e:	2103      	movs	r1, #3
 80005a0:	4618      	mov	r0, r3
 80005a2:	f001 fd47 	bl	8002034 <HAL_RCC_ClockConfig>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80005ac:	f000 f8b6 	bl	800071c <Error_Handler>
  }
}
 80005b0:	bf00      	nop
 80005b2:	3750      	adds	r7, #80	@ 0x50
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	40023800 	.word	0x40023800
 80005bc:	40007000 	.word	0x40007000

080005c0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80005c4:	4b18      	ldr	r3, [pc, #96]	@ (8000628 <MX_SPI1_Init+0x68>)
 80005c6:	4a19      	ldr	r2, [pc, #100]	@ (800062c <MX_SPI1_Init+0x6c>)
 80005c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80005ca:	4b17      	ldr	r3, [pc, #92]	@ (8000628 <MX_SPI1_Init+0x68>)
 80005cc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80005d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80005d2:	4b15      	ldr	r3, [pc, #84]	@ (8000628 <MX_SPI1_Init+0x68>)
 80005d4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80005d8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80005da:	4b13      	ldr	r3, [pc, #76]	@ (8000628 <MX_SPI1_Init+0x68>)
 80005dc:	2200      	movs	r2, #0
 80005de:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005e0:	4b11      	ldr	r3, [pc, #68]	@ (8000628 <MX_SPI1_Init+0x68>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005e6:	4b10      	ldr	r3, [pc, #64]	@ (8000628 <MX_SPI1_Init+0x68>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80005ec:	4b0e      	ldr	r3, [pc, #56]	@ (8000628 <MX_SPI1_Init+0x68>)
 80005ee:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80005f2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80005f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000628 <MX_SPI1_Init+0x68>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000628 <MX_SPI1_Init+0x68>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000600:	4b09      	ldr	r3, [pc, #36]	@ (8000628 <MX_SPI1_Init+0x68>)
 8000602:	2200      	movs	r2, #0
 8000604:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000606:	4b08      	ldr	r3, [pc, #32]	@ (8000628 <MX_SPI1_Init+0x68>)
 8000608:	2200      	movs	r2, #0
 800060a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800060c:	4b06      	ldr	r3, [pc, #24]	@ (8000628 <MX_SPI1_Init+0x68>)
 800060e:	220a      	movs	r2, #10
 8000610:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000612:	4805      	ldr	r0, [pc, #20]	@ (8000628 <MX_SPI1_Init+0x68>)
 8000614:	f001 feba 	bl	800238c <HAL_SPI_Init>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800061e:	f000 f87d 	bl	800071c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	20000080 	.word	0x20000080
 800062c:	40013000 	.word	0x40013000

08000630 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b08a      	sub	sp, #40	@ 0x28
 8000634:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000636:	f107 0314 	add.w	r3, r7, #20
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	609a      	str	r2, [r3, #8]
 8000642:	60da      	str	r2, [r3, #12]
 8000644:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000646:	2300      	movs	r3, #0
 8000648:	613b      	str	r3, [r7, #16]
 800064a:	4b31      	ldr	r3, [pc, #196]	@ (8000710 <MX_GPIO_Init+0xe0>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064e:	4a30      	ldr	r2, [pc, #192]	@ (8000710 <MX_GPIO_Init+0xe0>)
 8000650:	f043 0304 	orr.w	r3, r3, #4
 8000654:	6313      	str	r3, [r2, #48]	@ 0x30
 8000656:	4b2e      	ldr	r3, [pc, #184]	@ (8000710 <MX_GPIO_Init+0xe0>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065a:	f003 0304 	and.w	r3, r3, #4
 800065e:	613b      	str	r3, [r7, #16]
 8000660:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000662:	2300      	movs	r3, #0
 8000664:	60fb      	str	r3, [r7, #12]
 8000666:	4b2a      	ldr	r3, [pc, #168]	@ (8000710 <MX_GPIO_Init+0xe0>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800066a:	4a29      	ldr	r2, [pc, #164]	@ (8000710 <MX_GPIO_Init+0xe0>)
 800066c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000670:	6313      	str	r3, [r2, #48]	@ 0x30
 8000672:	4b27      	ldr	r3, [pc, #156]	@ (8000710 <MX_GPIO_Init+0xe0>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000676:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800067a:	60fb      	str	r3, [r7, #12]
 800067c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800067e:	2300      	movs	r3, #0
 8000680:	60bb      	str	r3, [r7, #8]
 8000682:	4b23      	ldr	r3, [pc, #140]	@ (8000710 <MX_GPIO_Init+0xe0>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000686:	4a22      	ldr	r2, [pc, #136]	@ (8000710 <MX_GPIO_Init+0xe0>)
 8000688:	f043 0301 	orr.w	r3, r3, #1
 800068c:	6313      	str	r3, [r2, #48]	@ 0x30
 800068e:	4b20      	ldr	r3, [pc, #128]	@ (8000710 <MX_GPIO_Init+0xe0>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000692:	f003 0301 	and.w	r3, r3, #1
 8000696:	60bb      	str	r3, [r7, #8]
 8000698:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800069a:	2300      	movs	r3, #0
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	4b1c      	ldr	r3, [pc, #112]	@ (8000710 <MX_GPIO_Init+0xe0>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a2:	4a1b      	ldr	r2, [pc, #108]	@ (8000710 <MX_GPIO_Init+0xe0>)
 80006a4:	f043 0302 	orr.w	r3, r3, #2
 80006a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006aa:	4b19      	ldr	r3, [pc, #100]	@ (8000710 <MX_GPIO_Init+0xe0>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ae:	f003 0302 	and.w	r3, r3, #2
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80006b6:	2200      	movs	r2, #0
 80006b8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006bc:	4815      	ldr	r0, [pc, #84]	@ (8000714 <MX_GPIO_Init+0xe4>)
 80006be:	f001 fa27 	bl	8001b10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 80006c2:	2200      	movs	r2, #0
 80006c4:	2118      	movs	r1, #24
 80006c6:	4814      	ldr	r0, [pc, #80]	@ (8000718 <MX_GPIO_Init+0xe8>)
 80006c8:	f001 fa22 	bl	8001b10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80006cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d2:	2301      	movs	r3, #1
 80006d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d6:	2300      	movs	r3, #0
 80006d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006da:	2300      	movs	r3, #0
 80006dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006de:	f107 0314 	add.w	r3, r7, #20
 80006e2:	4619      	mov	r1, r3
 80006e4:	480b      	ldr	r0, [pc, #44]	@ (8000714 <MX_GPIO_Init+0xe4>)
 80006e6:	f001 f88f 	bl	8001808 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80006ea:	2318      	movs	r3, #24
 80006ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ee:	2301      	movs	r3, #1
 80006f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f2:	2300      	movs	r3, #0
 80006f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f6:	2300      	movs	r3, #0
 80006f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006fa:	f107 0314 	add.w	r3, r7, #20
 80006fe:	4619      	mov	r1, r3
 8000700:	4805      	ldr	r0, [pc, #20]	@ (8000718 <MX_GPIO_Init+0xe8>)
 8000702:	f001 f881 	bl	8001808 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000706:	bf00      	nop
 8000708:	3728      	adds	r7, #40	@ 0x28
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40023800 	.word	0x40023800
 8000714:	40020800 	.word	0x40020800
 8000718:	40020400 	.word	0x40020400

0800071c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000720:	b672      	cpsid	i
}
 8000722:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000724:	bf00      	nop
 8000726:	e7fd      	b.n	8000724 <Error_Handler+0x8>

08000728 <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 800072c:	2200      	movs	r2, #0
 800072e:	2110      	movs	r1, #16
 8000730:	4802      	ldr	r0, [pc, #8]	@ (800073c <ST7735_Select+0x14>)
 8000732:	f001 f9ed 	bl	8001b10 <HAL_GPIO_WritePin>
}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	40020000 	.word	0x40020000

08000740 <ST7735_Unselect>:

void ST7735_Unselect() {
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8000744:	2201      	movs	r2, #1
 8000746:	2110      	movs	r1, #16
 8000748:	4802      	ldr	r0, [pc, #8]	@ (8000754 <ST7735_Unselect+0x14>)
 800074a:	f001 f9e1 	bl	8001b10 <HAL_GPIO_WritePin>
}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	40020000 	.word	0x40020000

08000758 <ST7735_Reset>:

static void ST7735_Reset() {
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 800075c:	2200      	movs	r2, #0
 800075e:	2108      	movs	r1, #8
 8000760:	4806      	ldr	r0, [pc, #24]	@ (800077c <ST7735_Reset+0x24>)
 8000762:	f001 f9d5 	bl	8001b10 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8000766:	2005      	movs	r0, #5
 8000768:	f000 ff44 	bl	80015f4 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 800076c:	2201      	movs	r2, #1
 800076e:	2108      	movs	r1, #8
 8000770:	4802      	ldr	r0, [pc, #8]	@ (800077c <ST7735_Reset+0x24>)
 8000772:	f001 f9cd 	bl	8001b10 <HAL_GPIO_WritePin>
}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40020400 	.word	0x40020400

08000780 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	71fb      	strb	r3, [r7, #7]
	// sizeof(cmd) or 1
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 800078a:	2200      	movs	r2, #0
 800078c:	2110      	movs	r1, #16
 800078e:	4807      	ldr	r0, [pc, #28]	@ (80007ac <ST7735_WriteCommand+0x2c>)
 8000790:	f001 f9be 	bl	8001b10 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000794:	1df9      	adds	r1, r7, #7
 8000796:	f04f 33ff 	mov.w	r3, #4294967295
 800079a:	2201      	movs	r2, #1
 800079c:	4804      	ldr	r0, [pc, #16]	@ (80007b0 <ST7735_WriteCommand+0x30>)
 800079e:	f001 fe7e 	bl	800249e <HAL_SPI_Transmit>
}
 80007a2:	bf00      	nop
 80007a4:	3708      	adds	r7, #8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	40020400 	.word	0x40020400
 80007b0:	20000080 	.word	0x20000080

080007b4 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
 80007bc:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80007be:	2201      	movs	r2, #1
 80007c0:	2110      	movs	r1, #16
 80007c2:	4807      	ldr	r0, [pc, #28]	@ (80007e0 <ST7735_WriteData+0x2c>)
 80007c4:	f001 f9a4 	bl	8001b10 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	b29a      	uxth	r2, r3
 80007cc:	f04f 33ff 	mov.w	r3, #4294967295
 80007d0:	6879      	ldr	r1, [r7, #4]
 80007d2:	4804      	ldr	r0, [pc, #16]	@ (80007e4 <ST7735_WriteData+0x30>)
 80007d4:	f001 fe63 	bl	800249e <HAL_SPI_Transmit>
}
 80007d8:	bf00      	nop
 80007da:	3708      	adds	r7, #8
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40020400 	.word	0x40020400
 80007e4:	20000080 	.word	0x20000080

080007e8 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	1c5a      	adds	r2, r3, #1
 80007f4:	607a      	str	r2, [r7, #4]
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 80007fa:	e034      	b.n	8000866 <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	1c5a      	adds	r2, r3, #1
 8000800:	607a      	str	r2, [r7, #4]
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8000806:	7afb      	ldrb	r3, [r7, #11]
 8000808:	4618      	mov	r0, r3
 800080a:	f7ff ffb9 	bl	8000780 <ST7735_WriteCommand>

        numArgs = *addr++;
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	1c5a      	adds	r2, r3, #1
 8000812:	607a      	str	r2, [r7, #4]
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8000818:	7abb      	ldrb	r3, [r7, #10]
 800081a:	b29b      	uxth	r3, r3
 800081c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000820:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8000822:	7abb      	ldrb	r3, [r7, #10]
 8000824:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000828:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 800082a:	7abb      	ldrb	r3, [r7, #10]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d008      	beq.n	8000842 <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8000830:	7abb      	ldrb	r3, [r7, #10]
 8000832:	4619      	mov	r1, r3
 8000834:	6878      	ldr	r0, [r7, #4]
 8000836:	f7ff ffbd 	bl	80007b4 <ST7735_WriteData>
            addr += numArgs;
 800083a:	7abb      	ldrb	r3, [r7, #10]
 800083c:	687a      	ldr	r2, [r7, #4]
 800083e:	4413      	add	r3, r2
 8000840:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8000842:	89bb      	ldrh	r3, [r7, #12]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d00e      	beq.n	8000866 <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	1c5a      	adds	r2, r3, #1
 800084c:	607a      	str	r2, [r7, #4]
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8000852:	89bb      	ldrh	r3, [r7, #12]
 8000854:	2bff      	cmp	r3, #255	@ 0xff
 8000856:	d102      	bne.n	800085e <ST7735_ExecuteCommandList+0x76>
 8000858:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800085c:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 800085e:	89bb      	ldrh	r3, [r7, #12]
 8000860:	4618      	mov	r0, r3
 8000862:	f000 fec7 	bl	80015f4 <HAL_Delay>
    while(numCommands--) {
 8000866:	7bfb      	ldrb	r3, [r7, #15]
 8000868:	1e5a      	subs	r2, r3, #1
 800086a:	73fa      	strb	r2, [r7, #15]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d1c5      	bne.n	80007fc <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8000870:	bf00      	nop
 8000872:	bf00      	nop
 8000874:	3710      	adds	r7, #16
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}

0800087a <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 800087a:	b590      	push	{r4, r7, lr}
 800087c:	b085      	sub	sp, #20
 800087e:	af00      	add	r7, sp, #0
 8000880:	4604      	mov	r4, r0
 8000882:	4608      	mov	r0, r1
 8000884:	4611      	mov	r1, r2
 8000886:	461a      	mov	r2, r3
 8000888:	4623      	mov	r3, r4
 800088a:	71fb      	strb	r3, [r7, #7]
 800088c:	4603      	mov	r3, r0
 800088e:	71bb      	strb	r3, [r7, #6]
 8000890:	460b      	mov	r3, r1
 8000892:	717b      	strb	r3, [r7, #5]
 8000894:	4613      	mov	r3, r2
 8000896:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8000898:	202a      	movs	r0, #42	@ 0x2a
 800089a:	f7ff ff71 	bl	8000780 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 800089e:	2300      	movs	r3, #0
 80008a0:	733b      	strb	r3, [r7, #12]
 80008a2:	79fb      	ldrb	r3, [r7, #7]
 80008a4:	3302      	adds	r3, #2
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	737b      	strb	r3, [r7, #13]
 80008aa:	2300      	movs	r3, #0
 80008ac:	73bb      	strb	r3, [r7, #14]
 80008ae:	797b      	ldrb	r3, [r7, #5]
 80008b0:	3302      	adds	r3, #2
 80008b2:	b2db      	uxtb	r3, r3
 80008b4:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80008b6:	f107 030c 	add.w	r3, r7, #12
 80008ba:	2104      	movs	r1, #4
 80008bc:	4618      	mov	r0, r3
 80008be:	f7ff ff79 	bl	80007b4 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 80008c2:	202b      	movs	r0, #43	@ 0x2b
 80008c4:	f7ff ff5c 	bl	8000780 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 80008c8:	79bb      	ldrb	r3, [r7, #6]
 80008ca:	3303      	adds	r3, #3
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 80008d0:	793b      	ldrb	r3, [r7, #4]
 80008d2:	3303      	adds	r3, #3
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80008d8:	f107 030c 	add.w	r3, r7, #12
 80008dc:	2104      	movs	r1, #4
 80008de:	4618      	mov	r0, r3
 80008e0:	f7ff ff68 	bl	80007b4 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 80008e4:	202c      	movs	r0, #44	@ 0x2c
 80008e6:	f7ff ff4b 	bl	8000780 <ST7735_WriteCommand>
}
 80008ea:	bf00      	nop
 80008ec:	3714      	adds	r7, #20
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd90      	pop	{r4, r7, pc}
	...

080008f4 <ST7735_Init>:

void ST7735_Init() {
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
    ST7735_Select();
 80008f8:	f7ff ff16 	bl	8000728 <ST7735_Select>
    ST7735_Reset();
 80008fc:	f7ff ff2c 	bl	8000758 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8000900:	4806      	ldr	r0, [pc, #24]	@ (800091c <ST7735_Init+0x28>)
 8000902:	f7ff ff71 	bl	80007e8 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8000906:	4806      	ldr	r0, [pc, #24]	@ (8000920 <ST7735_Init+0x2c>)
 8000908:	f7ff ff6e 	bl	80007e8 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 800090c:	4805      	ldr	r0, [pc, #20]	@ (8000924 <ST7735_Init+0x30>)
 800090e:	f7ff ff6b 	bl	80007e8 <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 8000912:	f7ff ff15 	bl	8000740 <ST7735_Unselect>
}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	08003478 	.word	0x08003478
 8000920:	080034b4 	.word	0x080034b4
 8000924:	080034c4 	.word	0x080034c4

08000928 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8000928:	b580      	push	{r7, lr}
 800092a:	b084      	sub	sp, #16
 800092c:	af00      	add	r7, sp, #0
 800092e:	4603      	mov	r3, r0
 8000930:	80fb      	strh	r3, [r7, #6]
 8000932:	460b      	mov	r3, r1
 8000934:	80bb      	strh	r3, [r7, #4]
 8000936:	4613      	mov	r3, r2
 8000938:	807b      	strh	r3, [r7, #2]
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT))
 800093a:	88fb      	ldrh	r3, [r7, #6]
 800093c:	2b7f      	cmp	r3, #127	@ 0x7f
 800093e:	d823      	bhi.n	8000988 <ST7735_DrawPixel+0x60>
 8000940:	88bb      	ldrh	r3, [r7, #4]
 8000942:	2b7f      	cmp	r3, #127	@ 0x7f
 8000944:	d820      	bhi.n	8000988 <ST7735_DrawPixel+0x60>
        return;

    ST7735_Select();
 8000946:	f7ff feef 	bl	8000728 <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 800094a:	88fb      	ldrh	r3, [r7, #6]
 800094c:	b2d8      	uxtb	r0, r3
 800094e:	88bb      	ldrh	r3, [r7, #4]
 8000950:	b2d9      	uxtb	r1, r3
 8000952:	88fb      	ldrh	r3, [r7, #6]
 8000954:	b2db      	uxtb	r3, r3
 8000956:	3301      	adds	r3, #1
 8000958:	b2da      	uxtb	r2, r3
 800095a:	88bb      	ldrh	r3, [r7, #4]
 800095c:	b2db      	uxtb	r3, r3
 800095e:	3301      	adds	r3, #1
 8000960:	b2db      	uxtb	r3, r3
 8000962:	f7ff ff8a 	bl	800087a <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 8000966:	887b      	ldrh	r3, [r7, #2]
 8000968:	0a1b      	lsrs	r3, r3, #8
 800096a:	b29b      	uxth	r3, r3
 800096c:	b2db      	uxtb	r3, r3
 800096e:	733b      	strb	r3, [r7, #12]
 8000970:	887b      	ldrh	r3, [r7, #2]
 8000972:	b2db      	uxtb	r3, r3
 8000974:	737b      	strb	r3, [r7, #13]
    ST7735_WriteData(data, sizeof(data));
 8000976:	f107 030c 	add.w	r3, r7, #12
 800097a:	2102      	movs	r1, #2
 800097c:	4618      	mov	r0, r3
 800097e:	f7ff ff19 	bl	80007b4 <ST7735_WriteData>

    ST7735_Unselect();
 8000982:	f7ff fedd 	bl	8000740 <ST7735_Unselect>
 8000986:	e000      	b.n	800098a <ST7735_DrawPixel+0x62>
        return;
 8000988:	bf00      	nop
}
 800098a:	3710      	adds	r7, #16
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}

08000990 <ST7735_DrawLine>:

void ST7735_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color) {
 8000990:	b590      	push	{r4, r7, lr}
 8000992:	b087      	sub	sp, #28
 8000994:	af00      	add	r7, sp, #0
 8000996:	4604      	mov	r4, r0
 8000998:	4608      	mov	r0, r1
 800099a:	4611      	mov	r1, r2
 800099c:	461a      	mov	r2, r3
 800099e:	4623      	mov	r3, r4
 80009a0:	80fb      	strh	r3, [r7, #6]
 80009a2:	4603      	mov	r3, r0
 80009a4:	80bb      	strh	r3, [r7, #4]
 80009a6:	460b      	mov	r3, r1
 80009a8:	807b      	strh	r3, [r7, #2]
 80009aa:	4613      	mov	r3, r2
 80009ac:	803b      	strh	r3, [r7, #0]
    int16_t dx = abs(x1 - x0);
 80009ae:	887a      	ldrh	r2, [r7, #2]
 80009b0:	88fb      	ldrh	r3, [r7, #6]
 80009b2:	1ad3      	subs	r3, r2, r3
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	bfb8      	it	lt
 80009b8:	425b      	neglt	r3, r3
 80009ba:	82bb      	strh	r3, [r7, #20]
    int16_t dy = -abs(y1 - y0);
 80009bc:	883a      	ldrh	r2, [r7, #0]
 80009be:	88bb      	ldrh	r3, [r7, #4]
 80009c0:	1ad3      	subs	r3, r2, r3
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	bfb8      	it	lt
 80009c6:	425b      	neglt	r3, r3
 80009c8:	b29b      	uxth	r3, r3
 80009ca:	425b      	negs	r3, r3
 80009cc:	b29b      	uxth	r3, r3
 80009ce:	827b      	strh	r3, [r7, #18]
    int16_t sx = (x0 < x1) ? 1 : -1;
 80009d0:	88fa      	ldrh	r2, [r7, #6]
 80009d2:	887b      	ldrh	r3, [r7, #2]
 80009d4:	429a      	cmp	r2, r3
 80009d6:	d201      	bcs.n	80009dc <ST7735_DrawLine+0x4c>
 80009d8:	2301      	movs	r3, #1
 80009da:	e001      	b.n	80009e0 <ST7735_DrawLine+0x50>
 80009dc:	f04f 33ff 	mov.w	r3, #4294967295
 80009e0:	823b      	strh	r3, [r7, #16]
    int16_t sy = (y0 < y1) ? 1 : -1;
 80009e2:	88ba      	ldrh	r2, [r7, #4]
 80009e4:	883b      	ldrh	r3, [r7, #0]
 80009e6:	429a      	cmp	r2, r3
 80009e8:	d201      	bcs.n	80009ee <ST7735_DrawLine+0x5e>
 80009ea:	2301      	movs	r3, #1
 80009ec:	e001      	b.n	80009f2 <ST7735_DrawLine+0x62>
 80009ee:	f04f 33ff 	mov.w	r3, #4294967295
 80009f2:	81fb      	strh	r3, [r7, #14]
    int16_t err = dx + dy;
 80009f4:	8aba      	ldrh	r2, [r7, #20]
 80009f6:	8a7b      	ldrh	r3, [r7, #18]
 80009f8:	4413      	add	r3, r2
 80009fa:	b29b      	uxth	r3, r3
 80009fc:	82fb      	strh	r3, [r7, #22]
    int16_t e2;

    while (1) {
        ST7735_DrawPixel(x0, y0, color);
 80009fe:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000a00:	88b9      	ldrh	r1, [r7, #4]
 8000a02:	88fb      	ldrh	r3, [r7, #6]
 8000a04:	4618      	mov	r0, r3
 8000a06:	f7ff ff8f 	bl	8000928 <ST7735_DrawPixel>
        if (x0 == x1 && y0 == y1) break;
 8000a0a:	88fa      	ldrh	r2, [r7, #6]
 8000a0c:	887b      	ldrh	r3, [r7, #2]
 8000a0e:	429a      	cmp	r2, r3
 8000a10:	d103      	bne.n	8000a1a <ST7735_DrawLine+0x8a>
 8000a12:	88ba      	ldrh	r2, [r7, #4]
 8000a14:	883b      	ldrh	r3, [r7, #0]
 8000a16:	429a      	cmp	r2, r3
 8000a18:	d022      	beq.n	8000a60 <ST7735_DrawLine+0xd0>
        e2 = 2 * err;
 8000a1a:	8afb      	ldrh	r3, [r7, #22]
 8000a1c:	005b      	lsls	r3, r3, #1
 8000a1e:	b29b      	uxth	r3, r3
 8000a20:	81bb      	strh	r3, [r7, #12]
        if (e2 >= dy) {
 8000a22:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a26:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000a2a:	429a      	cmp	r2, r3
 8000a2c:	db08      	blt.n	8000a40 <ST7735_DrawLine+0xb0>
            err += dy;
 8000a2e:	8afa      	ldrh	r2, [r7, #22]
 8000a30:	8a7b      	ldrh	r3, [r7, #18]
 8000a32:	4413      	add	r3, r2
 8000a34:	b29b      	uxth	r3, r3
 8000a36:	82fb      	strh	r3, [r7, #22]
            x0 += sx;
 8000a38:	8a3a      	ldrh	r2, [r7, #16]
 8000a3a:	88fb      	ldrh	r3, [r7, #6]
 8000a3c:	4413      	add	r3, r2
 8000a3e:	80fb      	strh	r3, [r7, #6]
        }
        if (e2 <= dx) {
 8000a40:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a44:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	dcd8      	bgt.n	80009fe <ST7735_DrawLine+0x6e>
            err += dx;
 8000a4c:	8afa      	ldrh	r2, [r7, #22]
 8000a4e:	8abb      	ldrh	r3, [r7, #20]
 8000a50:	4413      	add	r3, r2
 8000a52:	b29b      	uxth	r3, r3
 8000a54:	82fb      	strh	r3, [r7, #22]
            y0 += sy;
 8000a56:	89fa      	ldrh	r2, [r7, #14]
 8000a58:	88bb      	ldrh	r3, [r7, #4]
 8000a5a:	4413      	add	r3, r2
 8000a5c:	80bb      	strh	r3, [r7, #4]
        ST7735_DrawPixel(x0, y0, color);
 8000a5e:	e7ce      	b.n	80009fe <ST7735_DrawLine+0x6e>
        if (x0 == x1 && y0 == y1) break;
 8000a60:	bf00      	nop
        }
    }
}
 8000a62:	bf00      	nop
 8000a64:	371c      	adds	r7, #28
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd90      	pop	{r4, r7, pc}

08000a6a <ST7735_WriteChar>:

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	b590      	push	{r4, r7, lr}
 8000a6e:	b089      	sub	sp, #36	@ 0x24
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	637b      	str	r3, [r7, #52]	@ 0x34
 8000a74:	4603      	mov	r3, r0
 8000a76:	80fb      	strh	r3, [r7, #6]
 8000a78:	460b      	mov	r3, r1
 8000a7a:	80bb      	strh	r3, [r7, #4]
 8000a7c:	4613      	mov	r3, r2
 8000a7e:	70fb      	strb	r3, [r7, #3]
   uint32_t i, b, j;

   ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8000a80:	88fb      	ldrh	r3, [r7, #6]
 8000a82:	b2d8      	uxtb	r0, r3
 8000a84:	88bb      	ldrh	r3, [r7, #4]
 8000a86:	b2d9      	uxtb	r1, r3
 8000a88:	88fb      	ldrh	r3, [r7, #6]
 8000a8a:	b2da      	uxtb	r2, r3
 8000a8c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8000a90:	4413      	add	r3, r2
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	3b01      	subs	r3, #1
 8000a96:	b2dc      	uxtb	r4, r3
 8000a98:	88bb      	ldrh	r3, [r7, #4]
 8000a9a:	b2da      	uxtb	r2, r3
 8000a9c:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8000aa0:	4413      	add	r3, r2
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	3b01      	subs	r3, #1
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	4622      	mov	r2, r4
 8000aaa:	f7ff fee6 	bl	800087a <ST7735_SetAddressWindow>

   for(i = 0; i < font.height; i++) {
 8000aae:	2300      	movs	r3, #0
 8000ab0:	61fb      	str	r3, [r7, #28]
 8000ab2:	e043      	b.n	8000b3c <ST7735_WriteChar+0xd2>
       b = font.data[(ch - 32) * font.height + i];
 8000ab4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000ab6:	78fb      	ldrb	r3, [r7, #3]
 8000ab8:	3b20      	subs	r3, #32
 8000aba:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 8000abe:	fb01 f303 	mul.w	r3, r1, r3
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	69fb      	ldr	r3, [r7, #28]
 8000ac6:	440b      	add	r3, r1
 8000ac8:	005b      	lsls	r3, r3, #1
 8000aca:	4413      	add	r3, r2
 8000acc:	881b      	ldrh	r3, [r3, #0]
 8000ace:	617b      	str	r3, [r7, #20]
       for(j = 0; j < font.width; j++) {
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	61bb      	str	r3, [r7, #24]
 8000ad4:	e029      	b.n	8000b2a <ST7735_WriteChar+0xc0>
           if((b << j) & 0x8000)  {
 8000ad6:	697a      	ldr	r2, [r7, #20]
 8000ad8:	69bb      	ldr	r3, [r7, #24]
 8000ada:	fa02 f303 	lsl.w	r3, r2, r3
 8000ade:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d00e      	beq.n	8000b04 <ST7735_WriteChar+0x9a>
               uint8_t data[] = { color >> 8, color & 0xFF };
 8000ae6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8000ae8:	0a1b      	lsrs	r3, r3, #8
 8000aea:	b29b      	uxth	r3, r3
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	743b      	strb	r3, [r7, #16]
 8000af0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	747b      	strb	r3, [r7, #17]
               ST7735_WriteData(data, sizeof(data));
 8000af6:	f107 0310 	add.w	r3, r7, #16
 8000afa:	2102      	movs	r1, #2
 8000afc:	4618      	mov	r0, r3
 8000afe:	f7ff fe59 	bl	80007b4 <ST7735_WriteData>
 8000b02:	e00f      	b.n	8000b24 <ST7735_WriteChar+0xba>
           } else {
               uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8000b04:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8000b08:	0a1b      	lsrs	r3, r3, #8
 8000b0a:	b29b      	uxth	r3, r3
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	733b      	strb	r3, [r7, #12]
 8000b10:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	737b      	strb	r3, [r7, #13]
               ST7735_WriteData(data, sizeof(data));
 8000b18:	f107 030c 	add.w	r3, r7, #12
 8000b1c:	2102      	movs	r1, #2
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f7ff fe48 	bl	80007b4 <ST7735_WriteData>
       for(j = 0; j < font.width; j++) {
 8000b24:	69bb      	ldr	r3, [r7, #24]
 8000b26:	3301      	adds	r3, #1
 8000b28:	61bb      	str	r3, [r7, #24]
 8000b2a:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8000b2e:	461a      	mov	r2, r3
 8000b30:	69bb      	ldr	r3, [r7, #24]
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d3cf      	bcc.n	8000ad6 <ST7735_WriteChar+0x6c>
   for(i = 0; i < font.height; i++) {
 8000b36:	69fb      	ldr	r3, [r7, #28]
 8000b38:	3301      	adds	r3, #1
 8000b3a:	61fb      	str	r3, [r7, #28]
 8000b3c:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8000b40:	461a      	mov	r2, r3
 8000b42:	69fb      	ldr	r3, [r7, #28]
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d3b5      	bcc.n	8000ab4 <ST7735_WriteChar+0x4a>
           }
       }
   }
}
 8000b48:	bf00      	nop
 8000b4a:	bf00      	nop
 8000b4c:	3724      	adds	r7, #36	@ 0x24
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000b54:	b002      	add	sp, #8
 8000b56:	4770      	bx	lr

08000b58 <ST7735_WriteString>:

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000b58:	b082      	sub	sp, #8
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b086      	sub	sp, #24
 8000b5e:	af04      	add	r7, sp, #16
 8000b60:	603a      	str	r2, [r7, #0]
 8000b62:	617b      	str	r3, [r7, #20]
 8000b64:	4603      	mov	r3, r0
 8000b66:	80fb      	strh	r3, [r7, #6]
 8000b68:	460b      	mov	r3, r1
 8000b6a:	80bb      	strh	r3, [r7, #4]
   ST7735_Select();
 8000b6c:	f7ff fddc 	bl	8000728 <ST7735_Select>

   while(*str) {
 8000b70:	e02d      	b.n	8000bce <ST7735_WriteString+0x76>
       if(x + font.width >= ST7735_WIDTH) {
 8000b72:	88fb      	ldrh	r3, [r7, #6]
 8000b74:	7d3a      	ldrb	r2, [r7, #20]
 8000b76:	4413      	add	r3, r2
 8000b78:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b7a:	dd13      	ble.n	8000ba4 <ST7735_WriteString+0x4c>
           x = 0;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	80fb      	strh	r3, [r7, #6]
           y += font.height;
 8000b80:	7d7b      	ldrb	r3, [r7, #21]
 8000b82:	461a      	mov	r2, r3
 8000b84:	88bb      	ldrh	r3, [r7, #4]
 8000b86:	4413      	add	r3, r2
 8000b88:	80bb      	strh	r3, [r7, #4]
           if(y + font.height >= ST7735_HEIGHT) {
 8000b8a:	88bb      	ldrh	r3, [r7, #4]
 8000b8c:	7d7a      	ldrb	r2, [r7, #21]
 8000b8e:	4413      	add	r3, r2
 8000b90:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b92:	dc21      	bgt.n	8000bd8 <ST7735_WriteString+0x80>
               break;
           }

           if(*str == ' ') {
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	2b20      	cmp	r3, #32
 8000b9a:	d103      	bne.n	8000ba4 <ST7735_WriteString+0x4c>
               // skip spaces in the beginning of the new line
               str++;
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	603b      	str	r3, [r7, #0]
               continue;
 8000ba2:	e014      	b.n	8000bce <ST7735_WriteString+0x76>
           }
       }

       ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	781a      	ldrb	r2, [r3, #0]
 8000ba8:	88b9      	ldrh	r1, [r7, #4]
 8000baa:	88f8      	ldrh	r0, [r7, #6]
 8000bac:	8c3b      	ldrh	r3, [r7, #32]
 8000bae:	9302      	str	r3, [sp, #8]
 8000bb0:	8bbb      	ldrh	r3, [r7, #28]
 8000bb2:	9301      	str	r3, [sp, #4]
 8000bb4:	69bb      	ldr	r3, [r7, #24]
 8000bb6:	9300      	str	r3, [sp, #0]
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	f7ff ff56 	bl	8000a6a <ST7735_WriteChar>
       x += font.width;
 8000bbe:	7d3b      	ldrb	r3, [r7, #20]
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	88fb      	ldrh	r3, [r7, #6]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	80fb      	strh	r3, [r7, #6]
       str++;
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	3301      	adds	r3, #1
 8000bcc:	603b      	str	r3, [r7, #0]
   while(*str) {
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d1cd      	bne.n	8000b72 <ST7735_WriteString+0x1a>
 8000bd6:	e000      	b.n	8000bda <ST7735_WriteString+0x82>
               break;
 8000bd8:	bf00      	nop
   }

   ST7735_Unselect();
 8000bda:	f7ff fdb1 	bl	8000740 <ST7735_Unselect>
}
 8000bde:	bf00      	nop
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000be8:	b002      	add	sp, #8
 8000bea:	4770      	bx	lr

08000bec <ST7735_DrawRectangle>:

void ST7735_DrawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8000bec:	b590      	push	{r4, r7, lr}
 8000bee:	b085      	sub	sp, #20
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4604      	mov	r4, r0
 8000bf4:	4608      	mov	r0, r1
 8000bf6:	4611      	mov	r1, r2
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	4623      	mov	r3, r4
 8000bfc:	80fb      	strh	r3, [r7, #6]
 8000bfe:	4603      	mov	r3, r0
 8000c00:	80bb      	strh	r3, [r7, #4]
 8000c02:	460b      	mov	r3, r1
 8000c04:	807b      	strh	r3, [r7, #2]
 8000c06:	4613      	mov	r3, r2
 8000c08:	803b      	strh	r3, [r7, #0]
    // Draw horizontal linesST7735_DrawRectangle
    for (uint16_t i = 0; i < w; i++) {
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	81fb      	strh	r3, [r7, #14]
 8000c0e:	e019      	b.n	8000c44 <ST7735_DrawRectangle+0x58>
        ST7735_DrawPixel(x + i, y, color);
 8000c10:	88fa      	ldrh	r2, [r7, #6]
 8000c12:	89fb      	ldrh	r3, [r7, #14]
 8000c14:	4413      	add	r3, r2
 8000c16:	b29b      	uxth	r3, r3
 8000c18:	8c3a      	ldrh	r2, [r7, #32]
 8000c1a:	88b9      	ldrh	r1, [r7, #4]
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f7ff fe83 	bl	8000928 <ST7735_DrawPixel>
        ST7735_DrawPixel(x + i, y + h - 1, color);
 8000c22:	88fa      	ldrh	r2, [r7, #6]
 8000c24:	89fb      	ldrh	r3, [r7, #14]
 8000c26:	4413      	add	r3, r2
 8000c28:	b298      	uxth	r0, r3
 8000c2a:	88ba      	ldrh	r2, [r7, #4]
 8000c2c:	883b      	ldrh	r3, [r7, #0]
 8000c2e:	4413      	add	r3, r2
 8000c30:	b29b      	uxth	r3, r3
 8000c32:	3b01      	subs	r3, #1
 8000c34:	b29b      	uxth	r3, r3
 8000c36:	8c3a      	ldrh	r2, [r7, #32]
 8000c38:	4619      	mov	r1, r3
 8000c3a:	f7ff fe75 	bl	8000928 <ST7735_DrawPixel>
    for (uint16_t i = 0; i < w; i++) {
 8000c3e:	89fb      	ldrh	r3, [r7, #14]
 8000c40:	3301      	adds	r3, #1
 8000c42:	81fb      	strh	r3, [r7, #14]
 8000c44:	89fa      	ldrh	r2, [r7, #14]
 8000c46:	887b      	ldrh	r3, [r7, #2]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d3e1      	bcc.n	8000c10 <ST7735_DrawRectangle+0x24>
    }

    // Draw vertical lines
    for (uint16_t i = 0; i < h; i++) {
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	81bb      	strh	r3, [r7, #12]
 8000c50:	e019      	b.n	8000c86 <ST7735_DrawRectangle+0x9a>
        ST7735_DrawPixel(x, y + i, color);
 8000c52:	88ba      	ldrh	r2, [r7, #4]
 8000c54:	89bb      	ldrh	r3, [r7, #12]
 8000c56:	4413      	add	r3, r2
 8000c58:	b299      	uxth	r1, r3
 8000c5a:	8c3a      	ldrh	r2, [r7, #32]
 8000c5c:	88fb      	ldrh	r3, [r7, #6]
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f7ff fe62 	bl	8000928 <ST7735_DrawPixel>
        ST7735_DrawPixel(x + w - 1, y + i, color);
 8000c64:	88fa      	ldrh	r2, [r7, #6]
 8000c66:	887b      	ldrh	r3, [r7, #2]
 8000c68:	4413      	add	r3, r2
 8000c6a:	b29b      	uxth	r3, r3
 8000c6c:	3b01      	subs	r3, #1
 8000c6e:	b298      	uxth	r0, r3
 8000c70:	88ba      	ldrh	r2, [r7, #4]
 8000c72:	89bb      	ldrh	r3, [r7, #12]
 8000c74:	4413      	add	r3, r2
 8000c76:	b29b      	uxth	r3, r3
 8000c78:	8c3a      	ldrh	r2, [r7, #32]
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	f7ff fe54 	bl	8000928 <ST7735_DrawPixel>
    for (uint16_t i = 0; i < h; i++) {
 8000c80:	89bb      	ldrh	r3, [r7, #12]
 8000c82:	3301      	adds	r3, #1
 8000c84:	81bb      	strh	r3, [r7, #12]
 8000c86:	89ba      	ldrh	r2, [r7, #12]
 8000c88:	883b      	ldrh	r3, [r7, #0]
 8000c8a:	429a      	cmp	r2, r3
 8000c8c:	d3e1      	bcc.n	8000c52 <ST7735_DrawRectangle+0x66>
    }
}
 8000c8e:	bf00      	nop
 8000c90:	bf00      	nop
 8000c92:	3714      	adds	r7, #20
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd90      	pop	{r4, r7, pc}

08000c98 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8000c98:	b590      	push	{r4, r7, lr}
 8000c9a:	b085      	sub	sp, #20
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	4608      	mov	r0, r1
 8000ca2:	4611      	mov	r1, r2
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	4623      	mov	r3, r4
 8000ca8:	80fb      	strh	r3, [r7, #6]
 8000caa:	4603      	mov	r3, r0
 8000cac:	80bb      	strh	r3, [r7, #4]
 8000cae:	460b      	mov	r3, r1
 8000cb0:	807b      	strh	r3, [r7, #2]
 8000cb2:	4613      	mov	r3, r2
 8000cb4:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8000cb6:	88fb      	ldrh	r3, [r7, #6]
 8000cb8:	2b7f      	cmp	r3, #127	@ 0x7f
 8000cba:	d857      	bhi.n	8000d6c <ST7735_FillRectangle+0xd4>
 8000cbc:	88bb      	ldrh	r3, [r7, #4]
 8000cbe:	2b7f      	cmp	r3, #127	@ 0x7f
 8000cc0:	d854      	bhi.n	8000d6c <ST7735_FillRectangle+0xd4>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8000cc2:	88fa      	ldrh	r2, [r7, #6]
 8000cc4:	887b      	ldrh	r3, [r7, #2]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	2b80      	cmp	r3, #128	@ 0x80
 8000cca:	dd03      	ble.n	8000cd4 <ST7735_FillRectangle+0x3c>
 8000ccc:	88fb      	ldrh	r3, [r7, #6]
 8000cce:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8000cd2:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8000cd4:	88ba      	ldrh	r2, [r7, #4]
 8000cd6:	883b      	ldrh	r3, [r7, #0]
 8000cd8:	4413      	add	r3, r2
 8000cda:	2b80      	cmp	r3, #128	@ 0x80
 8000cdc:	dd03      	ble.n	8000ce6 <ST7735_FillRectangle+0x4e>
 8000cde:	88bb      	ldrh	r3, [r7, #4]
 8000ce0:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8000ce4:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8000ce6:	f7ff fd1f 	bl	8000728 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000cea:	88fb      	ldrh	r3, [r7, #6]
 8000cec:	b2d8      	uxtb	r0, r3
 8000cee:	88bb      	ldrh	r3, [r7, #4]
 8000cf0:	b2d9      	uxtb	r1, r3
 8000cf2:	88fb      	ldrh	r3, [r7, #6]
 8000cf4:	b2da      	uxtb	r2, r3
 8000cf6:	887b      	ldrh	r3, [r7, #2]
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	4413      	add	r3, r2
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	3b01      	subs	r3, #1
 8000d00:	b2dc      	uxtb	r4, r3
 8000d02:	88bb      	ldrh	r3, [r7, #4]
 8000d04:	b2da      	uxtb	r2, r3
 8000d06:	883b      	ldrh	r3, [r7, #0]
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	4413      	add	r3, r2
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	3b01      	subs	r3, #1
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	4622      	mov	r2, r4
 8000d14:	f7ff fdb1 	bl	800087a <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8000d18:	8c3b      	ldrh	r3, [r7, #32]
 8000d1a:	0a1b      	lsrs	r3, r3, #8
 8000d1c:	b29b      	uxth	r3, r3
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	733b      	strb	r3, [r7, #12]
 8000d22:	8c3b      	ldrh	r3, [r7, #32]
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8000d28:	2201      	movs	r2, #1
 8000d2a:	2110      	movs	r1, #16
 8000d2c:	4811      	ldr	r0, [pc, #68]	@ (8000d74 <ST7735_FillRectangle+0xdc>)
 8000d2e:	f000 feef 	bl	8001b10 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8000d32:	883b      	ldrh	r3, [r7, #0]
 8000d34:	80bb      	strh	r3, [r7, #4]
 8000d36:	e013      	b.n	8000d60 <ST7735_FillRectangle+0xc8>
        for(x = w; x > 0; x--) {
 8000d38:	887b      	ldrh	r3, [r7, #2]
 8000d3a:	80fb      	strh	r3, [r7, #6]
 8000d3c:	e00a      	b.n	8000d54 <ST7735_FillRectangle+0xbc>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8000d3e:	f107 010c 	add.w	r1, r7, #12
 8000d42:	f04f 33ff 	mov.w	r3, #4294967295
 8000d46:	2202      	movs	r2, #2
 8000d48:	480b      	ldr	r0, [pc, #44]	@ (8000d78 <ST7735_FillRectangle+0xe0>)
 8000d4a:	f001 fba8 	bl	800249e <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8000d4e:	88fb      	ldrh	r3, [r7, #6]
 8000d50:	3b01      	subs	r3, #1
 8000d52:	80fb      	strh	r3, [r7, #6]
 8000d54:	88fb      	ldrh	r3, [r7, #6]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d1f1      	bne.n	8000d3e <ST7735_FillRectangle+0xa6>
    for(y = h; y > 0; y--) {
 8000d5a:	88bb      	ldrh	r3, [r7, #4]
 8000d5c:	3b01      	subs	r3, #1
 8000d5e:	80bb      	strh	r3, [r7, #4]
 8000d60:	88bb      	ldrh	r3, [r7, #4]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d1e8      	bne.n	8000d38 <ST7735_FillRectangle+0xa0>
        }
    }

    ST7735_Unselect();
 8000d66:	f7ff fceb 	bl	8000740 <ST7735_Unselect>
 8000d6a:	e000      	b.n	8000d6e <ST7735_FillRectangle+0xd6>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8000d6c:	bf00      	nop
}
 8000d6e:	3714      	adds	r7, #20
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd90      	pop	{r4, r7, pc}
 8000d74:	40020400 	.word	0x40020400
 8000d78:	20000080 	.word	0x20000080

08000d7c <ST7735_FillRectangleFast>:

void ST7735_FillRectangleFast(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8000d7c:	b590      	push	{r4, r7, lr}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4604      	mov	r4, r0
 8000d84:	4608      	mov	r0, r1
 8000d86:	4611      	mov	r1, r2
 8000d88:	461a      	mov	r2, r3
 8000d8a:	4623      	mov	r3, r4
 8000d8c:	80fb      	strh	r3, [r7, #6]
 8000d8e:	4603      	mov	r3, r0
 8000d90:	80bb      	strh	r3, [r7, #4]
 8000d92:	460b      	mov	r3, r1
 8000d94:	807b      	strh	r3, [r7, #2]
 8000d96:	4613      	mov	r3, r2
 8000d98:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8000d9a:	88fb      	ldrh	r3, [r7, #6]
 8000d9c:	2b7f      	cmp	r3, #127	@ 0x7f
 8000d9e:	d869      	bhi.n	8000e74 <ST7735_FillRectangleFast+0xf8>
 8000da0:	88bb      	ldrh	r3, [r7, #4]
 8000da2:	2b7f      	cmp	r3, #127	@ 0x7f
 8000da4:	d866      	bhi.n	8000e74 <ST7735_FillRectangleFast+0xf8>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8000da6:	88fa      	ldrh	r2, [r7, #6]
 8000da8:	887b      	ldrh	r3, [r7, #2]
 8000daa:	4413      	add	r3, r2
 8000dac:	2b80      	cmp	r3, #128	@ 0x80
 8000dae:	dd03      	ble.n	8000db8 <ST7735_FillRectangleFast+0x3c>
 8000db0:	88fb      	ldrh	r3, [r7, #6]
 8000db2:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8000db6:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8000db8:	88ba      	ldrh	r2, [r7, #4]
 8000dba:	883b      	ldrh	r3, [r7, #0]
 8000dbc:	4413      	add	r3, r2
 8000dbe:	2b80      	cmp	r3, #128	@ 0x80
 8000dc0:	dd03      	ble.n	8000dca <ST7735_FillRectangleFast+0x4e>
 8000dc2:	88bb      	ldrh	r3, [r7, #4]
 8000dc4:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8000dc8:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8000dca:	f7ff fcad 	bl	8000728 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000dce:	88fb      	ldrh	r3, [r7, #6]
 8000dd0:	b2d8      	uxtb	r0, r3
 8000dd2:	88bb      	ldrh	r3, [r7, #4]
 8000dd4:	b2d9      	uxtb	r1, r3
 8000dd6:	88fb      	ldrh	r3, [r7, #6]
 8000dd8:	b2da      	uxtb	r2, r3
 8000dda:	887b      	ldrh	r3, [r7, #2]
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	4413      	add	r3, r2
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	3b01      	subs	r3, #1
 8000de4:	b2dc      	uxtb	r4, r3
 8000de6:	88bb      	ldrh	r3, [r7, #4]
 8000de8:	b2da      	uxtb	r2, r3
 8000dea:	883b      	ldrh	r3, [r7, #0]
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	4413      	add	r3, r2
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	3b01      	subs	r3, #1
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	4622      	mov	r2, r4
 8000df8:	f7ff fd3f 	bl	800087a <ST7735_SetAddressWindow>

    // Prepare whole line in a single buffer
    uint8_t pixel[] = { color >> 8, color & 0xFF };
 8000dfc:	8c3b      	ldrh	r3, [r7, #32]
 8000dfe:	0a1b      	lsrs	r3, r3, #8
 8000e00:	b29b      	uxth	r3, r3
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	723b      	strb	r3, [r7, #8]
 8000e06:	8c3b      	ldrh	r3, [r7, #32]
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	727b      	strb	r3, [r7, #9]
    uint8_t *line = malloc(w * sizeof(pixel));
 8000e0c:	887b      	ldrh	r3, [r7, #2]
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	4618      	mov	r0, r3
 8000e12:	f001 fd63 	bl	80028dc <malloc>
 8000e16:	4603      	mov	r3, r0
 8000e18:	60fb      	str	r3, [r7, #12]
    for(x = 0; x < w; ++x)
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	80fb      	strh	r3, [r7, #6]
 8000e1e:	e008      	b.n	8000e32 <ST7735_FillRectangleFast+0xb6>
    	memcpy(line + x * sizeof(pixel), pixel, sizeof(pixel));
 8000e20:	88fb      	ldrh	r3, [r7, #6]
 8000e22:	005b      	lsls	r3, r3, #1
 8000e24:	68fa      	ldr	r2, [r7, #12]
 8000e26:	4413      	add	r3, r2
 8000e28:	893a      	ldrh	r2, [r7, #8]
 8000e2a:	801a      	strh	r2, [r3, #0]
    for(x = 0; x < w; ++x)
 8000e2c:	88fb      	ldrh	r3, [r7, #6]
 8000e2e:	3301      	adds	r3, #1
 8000e30:	80fb      	strh	r3, [r7, #6]
 8000e32:	88fa      	ldrh	r2, [r7, #6]
 8000e34:	887b      	ldrh	r3, [r7, #2]
 8000e36:	429a      	cmp	r2, r3
 8000e38:	d3f2      	bcc.n	8000e20 <ST7735_FillRectangleFast+0xa4>

    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	2110      	movs	r1, #16
 8000e3e:	480f      	ldr	r0, [pc, #60]	@ (8000e7c <ST7735_FillRectangleFast+0x100>)
 8000e40:	f000 fe66 	bl	8001b10 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--)
 8000e44:	883b      	ldrh	r3, [r7, #0]
 8000e46:	80bb      	strh	r3, [r7, #4]
 8000e48:	e00b      	b.n	8000e62 <ST7735_FillRectangleFast+0xe6>
        HAL_SPI_Transmit(&ST7735_SPI_PORT, line, w * sizeof(pixel), HAL_MAX_DELAY);
 8000e4a:	887b      	ldrh	r3, [r7, #2]
 8000e4c:	005b      	lsls	r3, r3, #1
 8000e4e:	b29a      	uxth	r2, r3
 8000e50:	f04f 33ff 	mov.w	r3, #4294967295
 8000e54:	68f9      	ldr	r1, [r7, #12]
 8000e56:	480a      	ldr	r0, [pc, #40]	@ (8000e80 <ST7735_FillRectangleFast+0x104>)
 8000e58:	f001 fb21 	bl	800249e <HAL_SPI_Transmit>
    for(y = h; y > 0; y--)
 8000e5c:	88bb      	ldrh	r3, [r7, #4]
 8000e5e:	3b01      	subs	r3, #1
 8000e60:	80bb      	strh	r3, [r7, #4]
 8000e62:	88bb      	ldrh	r3, [r7, #4]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d1f0      	bne.n	8000e4a <ST7735_FillRectangleFast+0xce>

    free(line);
 8000e68:	68f8      	ldr	r0, [r7, #12]
 8000e6a:	f001 fd3f 	bl	80028ec <free>
    ST7735_Unselect();
 8000e6e:	f7ff fc67 	bl	8000740 <ST7735_Unselect>
 8000e72:	e000      	b.n	8000e76 <ST7735_FillRectangleFast+0xfa>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8000e74:	bf00      	nop
}
 8000e76:	3714      	adds	r7, #20
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd90      	pop	{r4, r7, pc}
 8000e7c:	40020400 	.word	0x40020400
 8000e80:	20000080 	.word	0x20000080

08000e84 <ST7735_FillScreen>:

void ST7735_FillScreen(uint16_t color) {
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af02      	add	r7, sp, #8
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8000e8e:	88fb      	ldrh	r3, [r7, #6]
 8000e90:	9300      	str	r3, [sp, #0]
 8000e92:	2380      	movs	r3, #128	@ 0x80
 8000e94:	2280      	movs	r2, #128	@ 0x80
 8000e96:	2100      	movs	r1, #0
 8000e98:	2000      	movs	r0, #0
 8000e9a:	f7ff fefd 	bl	8000c98 <ST7735_FillRectangle>
}
 8000e9e:	bf00      	nop
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <ST7735_FillScreenFast>:

void ST7735_FillScreenFast(uint16_t color) {
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b084      	sub	sp, #16
 8000eaa:	af02      	add	r7, sp, #8
 8000eac:	4603      	mov	r3, r0
 8000eae:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangleFast(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8000eb0:	88fb      	ldrh	r3, [r7, #6]
 8000eb2:	9300      	str	r3, [sp, #0]
 8000eb4:	2380      	movs	r3, #128	@ 0x80
 8000eb6:	2280      	movs	r2, #128	@ 0x80
 8000eb8:	2100      	movs	r1, #0
 8000eba:	2000      	movs	r0, #0
 8000ebc:	f7ff ff5e 	bl	8000d7c <ST7735_FillRectangleFast>
}
 8000ec0:	bf00      	nop
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <ST7735_InvertColors>:
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
    sendSPI(data, w*h*2);
    //ST7735_Unselect();
}

void ST7735_InvertColors(bool invert) {
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	71fb      	strb	r3, [r7, #7]
    ST7735_Select();
 8000ed2:	f7ff fc29 	bl	8000728 <ST7735_Select>
    ST7735_WriteCommand(invert ? ST7735_INVON : ST7735_INVOFF);
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <ST7735_InvertColors+0x18>
 8000edc:	2321      	movs	r3, #33	@ 0x21
 8000ede:	e000      	b.n	8000ee2 <ST7735_InvertColors+0x1a>
 8000ee0:	2320      	movs	r3, #32
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff fc4c 	bl	8000780 <ST7735_WriteCommand>
    ST7735_Unselect();
 8000ee8:	f7ff fc2a 	bl	8000740 <ST7735_Unselect>
}
 8000eec:	bf00      	nop
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <ST7735_SetGamma>:

void ST7735_SetGamma(GammaDef gamma)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	71fb      	strb	r3, [r7, #7]
	ST7735_Select();
 8000efe:	f7ff fc13 	bl	8000728 <ST7735_Select>
	ST7735_WriteCommand(ST7735_GAMSET);
 8000f02:	2026      	movs	r0, #38	@ 0x26
 8000f04:	f7ff fc3c 	bl	8000780 <ST7735_WriteCommand>
	ST7735_WriteData((uint8_t *) &gamma, sizeof(gamma));
 8000f08:	1dfb      	adds	r3, r7, #7
 8000f0a:	2101      	movs	r1, #1
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff fc51 	bl	80007b4 <ST7735_WriteData>
	ST7735_Unselect();
 8000f12:	f7ff fc15 	bl	8000740 <ST7735_Unselect>
}
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
	...

08000f20 <ST7735_Test>:

void ST7735_Test() {
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af04      	add	r7, sp, #16
    // Test filling the screen with different colors
    ST7735_FillScreen(ST7735_BLACK);
 8000f26:	2000      	movs	r0, #0
 8000f28:	f7ff ffac 	bl	8000e84 <ST7735_FillScreen>
    HAL_Delay(CUSTOM_DELAY);
 8000f2c:	200a      	movs	r0, #10
 8000f2e:	f000 fb61 	bl	80015f4 <HAL_Delay>
    ST7735_FillScreen(ST7735_RED);
 8000f32:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8000f36:	f7ff ffa5 	bl	8000e84 <ST7735_FillScreen>
    HAL_Delay(CUSTOM_DELAY);
 8000f3a:	200a      	movs	r0, #10
 8000f3c:	f000 fb5a 	bl	80015f4 <HAL_Delay>
    ST7735_FillScreen(ST7735_GREEN);
 8000f40:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 8000f44:	f7ff ff9e 	bl	8000e84 <ST7735_FillScreen>
    HAL_Delay(CUSTOM_DELAY);
 8000f48:	200a      	movs	r0, #10
 8000f4a:	f000 fb53 	bl	80015f4 <HAL_Delay>
    ST7735_FillScreen(ST7735_BLUE);
 8000f4e:	201f      	movs	r0, #31
 8000f50:	f7ff ff98 	bl	8000e84 <ST7735_FillScreen>
    HAL_Delay(CUSTOM_DELAY);
 8000f54:	200a      	movs	r0, #10
 8000f56:	f000 fb4d 	bl	80015f4 <HAL_Delay>
    ST7735_FillScreen(ST7735_WHITE);
 8000f5a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000f5e:	f7ff ff91 	bl	8000e84 <ST7735_FillScreen>
    HAL_Delay(CUSTOM_DELAY);
 8000f62:	200a      	movs	r0, #10
 8000f64:	f000 fb46 	bl	80015f4 <HAL_Delay>
    ST7735_FillScreen(ST7735_BLACK);
 8000f68:	2000      	movs	r0, #0
 8000f6a:	f7ff ff8b 	bl	8000e84 <ST7735_FillScreen>
    HAL_Delay(END_DELAY);
 8000f6e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f72:	f000 fb3f 	bl	80015f4 <HAL_Delay>

    // Test writing a large amount of text to the screen
    ST7735_WriteString(0, 0, "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur adipiscing ante sed nibh tincidunt feugiat. Maecenas enim massa, fringilla sed malesuada et, malesuada sit amet turpis. Sed porttitor neque ut ante pretium vitae malesuada nunc bibendum. Nullam aliquet ultrices massa eu hendrerit. Ut sed nisi lorem. In vestibulum purus a tortor imperdiet posuere.", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000f76:	4b5b      	ldr	r3, [pc, #364]	@ (80010e4 <ST7735_Test+0x1c4>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	9202      	str	r2, [sp, #8]
 8000f7c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f80:	9201      	str	r2, [sp, #4]
 8000f82:	685a      	ldr	r2, [r3, #4]
 8000f84:	9200      	str	r2, [sp, #0]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a57      	ldr	r2, [pc, #348]	@ (80010e8 <ST7735_Test+0x1c8>)
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	2000      	movs	r0, #0
 8000f8e:	f7ff fde3 	bl	8000b58 <ST7735_WriteString>
    HAL_Delay(END_DELAY);
 8000f92:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f96:	f000 fb2d 	bl	80015f4 <HAL_Delay>

    // Test drawing lines
    testlines(ST7735_YELLOW);
 8000f9a:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 8000f9e:	f000 f8a7 	bl	80010f0 <testlines>
    HAL_Delay(END_DELAY);
 8000fa2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fa6:	f000 fb25 	bl	80015f4 <HAL_Delay>

    // Test drawing rectangles
    testdrawrects(ST7735_MAGENTA);
 8000faa:	f64f 001f 	movw	r0, #63519	@ 0xf81f
 8000fae:	f000 f969 	bl	8001284 <testdrawrects>
    HAL_Delay(END_DELAY);
 8000fb2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fb6:	f000 fb1d 	bl	80015f4 <HAL_Delay>

    // Test drawing pixels
    ST7735_DrawPixel(10, 10, ST7735_RED);
 8000fba:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8000fbe:	210a      	movs	r1, #10
 8000fc0:	200a      	movs	r0, #10
 8000fc2:	f7ff fcb1 	bl	8000928 <ST7735_DrawPixel>
    ST7735_DrawPixel(20, 20, ST7735_GREEN);
 8000fc6:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8000fca:	2114      	movs	r1, #20
 8000fcc:	2014      	movs	r0, #20
 8000fce:	f7ff fcab 	bl	8000928 <ST7735_DrawPixel>
    ST7735_DrawPixel(30, 30, ST7735_BLUE);
 8000fd2:	221f      	movs	r2, #31
 8000fd4:	211e      	movs	r1, #30
 8000fd6:	201e      	movs	r0, #30
 8000fd8:	f7ff fca6 	bl	8000928 <ST7735_DrawPixel>
    HAL_Delay(END_DELAY);
 8000fdc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fe0:	f000 fb08 	bl	80015f4 <HAL_Delay>

    // Test filling rectangles
    ST7735_FillRectangle(10, 10, 20, 20, ST7735_CYAN);
 8000fe4:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000fe8:	9300      	str	r3, [sp, #0]
 8000fea:	2314      	movs	r3, #20
 8000fec:	2214      	movs	r2, #20
 8000fee:	210a      	movs	r1, #10
 8000ff0:	200a      	movs	r0, #10
 8000ff2:	f7ff fe51 	bl	8000c98 <ST7735_FillRectangle>
    HAL_Delay(CUSTOM_DELAY);
 8000ff6:	200a      	movs	r0, #10
 8000ff8:	f000 fafc 	bl	80015f4 <HAL_Delay>
    ST7735_FillRectangleFast(40, 40, 30, 30, ST7735_MAGENTA);
 8000ffc:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	231e      	movs	r3, #30
 8001004:	221e      	movs	r2, #30
 8001006:	2128      	movs	r1, #40	@ 0x28
 8001008:	2028      	movs	r0, #40	@ 0x28
 800100a:	f7ff feb7 	bl	8000d7c <ST7735_FillRectangleFast>
    HAL_Delay(CUSTOM_DELAY);
 800100e:	200a      	movs	r0, #10
 8001010:	f000 faf0 	bl	80015f4 <HAL_Delay>
    ST7735_FillRectangleFast(80, 80, 40, 40, ST7735_RED);
 8001014:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001018:	9300      	str	r3, [sp, #0]
 800101a:	2328      	movs	r3, #40	@ 0x28
 800101c:	2228      	movs	r2, #40	@ 0x28
 800101e:	2150      	movs	r1, #80	@ 0x50
 8001020:	2050      	movs	r0, #80	@ 0x50
 8001022:	f7ff feab 	bl	8000d7c <ST7735_FillRectangleFast>
    HAL_Delay(END_DELAY);
 8001026:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800102a:	f000 fae3 	bl	80015f4 <HAL_Delay>

    // Test writing strings
    ST7735_WriteString(10, 10, "Hello, World!", Font_7x10, ST7735_BLACK, ST7735_WHITE);
 800102e:	4b2d      	ldr	r3, [pc, #180]	@ (80010e4 <ST7735_Test+0x1c4>)
 8001030:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001034:	9202      	str	r2, [sp, #8]
 8001036:	2200      	movs	r2, #0
 8001038:	9201      	str	r2, [sp, #4]
 800103a:	685a      	ldr	r2, [r3, #4]
 800103c:	9200      	str	r2, [sp, #0]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a2a      	ldr	r2, [pc, #168]	@ (80010ec <ST7735_Test+0x1cc>)
 8001042:	210a      	movs	r1, #10
 8001044:	200a      	movs	r0, #10
 8001046:	f7ff fd87 	bl	8000b58 <ST7735_WriteString>
    HAL_Delay(END_DELAY);
 800104a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800104e:	f000 fad1 	bl	80015f4 <HAL_Delay>
    // const uint16_t image_data[] = { ... }; // Example image data
    // ST7735_DrawImage(0, 0, 128, 128, image_data);
    // HAL_Delay(1000);

    // Test inverting colors
    ST7735_InvertColors(true);
 8001052:	2001      	movs	r0, #1
 8001054:	f7ff ff38 	bl	8000ec8 <ST7735_InvertColors>
    HAL_Delay(END_DELAY);
 8001058:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800105c:	f000 faca 	bl	80015f4 <HAL_Delay>
    ST7735_InvertColors(false);
 8001060:	2000      	movs	r0, #0
 8001062:	f7ff ff31 	bl	8000ec8 <ST7735_InvertColors>
    HAL_Delay(END_DELAY);
 8001066:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800106a:	f000 fac3 	bl	80015f4 <HAL_Delay>

    // Test setting gamma
    ST7735_SetGamma(GAMMA_10);
 800106e:	2001      	movs	r0, #1
 8001070:	f7ff ff40 	bl	8000ef4 <ST7735_SetGamma>
    HAL_Delay(200);
 8001074:	20c8      	movs	r0, #200	@ 0xc8
 8001076:	f000 fabd 	bl	80015f4 <HAL_Delay>
    ST7735_SetGamma(GAMMA_22);
 800107a:	2004      	movs	r0, #4
 800107c:	f7ff ff3a 	bl	8000ef4 <ST7735_SetGamma>
    HAL_Delay(200);
 8001080:	20c8      	movs	r0, #200	@ 0xc8
 8001082:	f000 fab7 	bl	80015f4 <HAL_Delay>
    ST7735_FillScreenFast(ST7735_BLACK);
 8001086:	2000      	movs	r0, #0
 8001088:	f7ff ff0d 	bl	8000ea6 <ST7735_FillScreenFast>

    ST7735_FillScreenFast(ST7735_BLACK);
 800108c:	2000      	movs	r0, #0
 800108e:	f7ff ff0a 	bl	8000ea6 <ST7735_FillScreenFast>
	HAL_Delay(CUSTOM_DELAY);
 8001092:	200a      	movs	r0, #10
 8001094:	f000 faae 	bl	80015f4 <HAL_Delay>
	ST7735_FillScreenFast(ST7735_RED);
 8001098:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 800109c:	f7ff ff03 	bl	8000ea6 <ST7735_FillScreenFast>
	HAL_Delay(CUSTOM_DELAY);
 80010a0:	200a      	movs	r0, #10
 80010a2:	f000 faa7 	bl	80015f4 <HAL_Delay>
	ST7735_FillScreenFast(ST7735_GREEN);
 80010a6:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 80010aa:	f7ff fefc 	bl	8000ea6 <ST7735_FillScreenFast>
	HAL_Delay(CUSTOM_DELAY);
 80010ae:	200a      	movs	r0, #10
 80010b0:	f000 faa0 	bl	80015f4 <HAL_Delay>
	ST7735_FillScreenFast(ST7735_BLUE);
 80010b4:	201f      	movs	r0, #31
 80010b6:	f7ff fef6 	bl	8000ea6 <ST7735_FillScreenFast>
	HAL_Delay(CUSTOM_DELAY);
 80010ba:	200a      	movs	r0, #10
 80010bc:	f000 fa9a 	bl	80015f4 <HAL_Delay>
	ST7735_FillScreenFast(ST7735_WHITE);
 80010c0:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80010c4:	f7ff feef 	bl	8000ea6 <ST7735_FillScreenFast>
	HAL_Delay(CUSTOM_DELAY);
 80010c8:	200a      	movs	r0, #10
 80010ca:	f000 fa93 	bl	80015f4 <HAL_Delay>
	ST7735_FillScreenFast(ST7735_BLACK);
 80010ce:	2000      	movs	r0, #0
 80010d0:	f7ff fee9 	bl	8000ea6 <ST7735_FillScreenFast>
	HAL_Delay(END_DELAY);
 80010d4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010d8:	f000 fa8c 	bl	80015f4 <HAL_Delay>
}
 80010dc:	bf00      	nop
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	20000000 	.word	0x20000000
 80010e8:	08002b8c 	.word	0x08002b8c
 80010ec:	08002cfc 	.word	0x08002cfc

080010f0 <testlines>:

void testlines(uint16_t color) {
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b088      	sub	sp, #32
 80010f4:	af02      	add	r7, sp, #8
 80010f6:	4603      	mov	r3, r0
 80010f8:	80fb      	strh	r3, [r7, #6]
    ST7735_FillScreenFast(ST7735_BLACK);
 80010fa:	2000      	movs	r0, #0
 80010fc:	f7ff fed3 	bl	8000ea6 <ST7735_FillScreenFast>
    for (int16_t x = 0; x < ST7735_WIDTH; x += 6) {
 8001100:	2300      	movs	r3, #0
 8001102:	82fb      	strh	r3, [r7, #22]
 8001104:	e00e      	b.n	8001124 <testlines+0x34>
        ST7735_DrawLine(0, 0, x, ST7735_HEIGHT - 1, color);
 8001106:	8afa      	ldrh	r2, [r7, #22]
 8001108:	88fb      	ldrh	r3, [r7, #6]
 800110a:	9300      	str	r3, [sp, #0]
 800110c:	237f      	movs	r3, #127	@ 0x7f
 800110e:	2100      	movs	r1, #0
 8001110:	2000      	movs	r0, #0
 8001112:	f7ff fc3d 	bl	8000990 <ST7735_DrawLine>
        HAL_Delay(CUSTOM_DELAY);
 8001116:	200a      	movs	r0, #10
 8001118:	f000 fa6c 	bl	80015f4 <HAL_Delay>
    for (int16_t x = 0; x < ST7735_WIDTH; x += 6) {
 800111c:	8afb      	ldrh	r3, [r7, #22]
 800111e:	3306      	adds	r3, #6
 8001120:	b29b      	uxth	r3, r3
 8001122:	82fb      	strh	r3, [r7, #22]
 8001124:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001128:	2b7f      	cmp	r3, #127	@ 0x7f
 800112a:	ddec      	ble.n	8001106 <testlines+0x16>
    }
    for (int16_t y = 0; y < ST7735_HEIGHT; y += 6) {
 800112c:	2300      	movs	r3, #0
 800112e:	82bb      	strh	r3, [r7, #20]
 8001130:	e00f      	b.n	8001152 <testlines+0x62>
        ST7735_DrawLine(0, 0, ST7735_WIDTH - 1, y, color);
 8001132:	8aba      	ldrh	r2, [r7, #20]
 8001134:	88fb      	ldrh	r3, [r7, #6]
 8001136:	9300      	str	r3, [sp, #0]
 8001138:	4613      	mov	r3, r2
 800113a:	227f      	movs	r2, #127	@ 0x7f
 800113c:	2100      	movs	r1, #0
 800113e:	2000      	movs	r0, #0
 8001140:	f7ff fc26 	bl	8000990 <ST7735_DrawLine>
        HAL_Delay(CUSTOM_DELAY);
 8001144:	200a      	movs	r0, #10
 8001146:	f000 fa55 	bl	80015f4 <HAL_Delay>
    for (int16_t y = 0; y < ST7735_HEIGHT; y += 6) {
 800114a:	8abb      	ldrh	r3, [r7, #20]
 800114c:	3306      	adds	r3, #6
 800114e:	b29b      	uxth	r3, r3
 8001150:	82bb      	strh	r3, [r7, #20]
 8001152:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001156:	2b7f      	cmp	r3, #127	@ 0x7f
 8001158:	ddeb      	ble.n	8001132 <testlines+0x42>
    }

    ST7735_FillScreenFast(ST7735_BLACK);
 800115a:	2000      	movs	r0, #0
 800115c:	f7ff fea3 	bl	8000ea6 <ST7735_FillScreenFast>
    for (int16_t x = 0; x < ST7735_WIDTH; x += 6) {
 8001160:	2300      	movs	r3, #0
 8001162:	827b      	strh	r3, [r7, #18]
 8001164:	e00e      	b.n	8001184 <testlines+0x94>
        ST7735_DrawLine(ST7735_WIDTH - 1, 0, x, ST7735_HEIGHT - 1, color);
 8001166:	8a7a      	ldrh	r2, [r7, #18]
 8001168:	88fb      	ldrh	r3, [r7, #6]
 800116a:	9300      	str	r3, [sp, #0]
 800116c:	237f      	movs	r3, #127	@ 0x7f
 800116e:	2100      	movs	r1, #0
 8001170:	207f      	movs	r0, #127	@ 0x7f
 8001172:	f7ff fc0d 	bl	8000990 <ST7735_DrawLine>
        HAL_Delay(CUSTOM_DELAY);
 8001176:	200a      	movs	r0, #10
 8001178:	f000 fa3c 	bl	80015f4 <HAL_Delay>
    for (int16_t x = 0; x < ST7735_WIDTH; x += 6) {
 800117c:	8a7b      	ldrh	r3, [r7, #18]
 800117e:	3306      	adds	r3, #6
 8001180:	b29b      	uxth	r3, r3
 8001182:	827b      	strh	r3, [r7, #18]
 8001184:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001188:	2b7f      	cmp	r3, #127	@ 0x7f
 800118a:	ddec      	ble.n	8001166 <testlines+0x76>
    }
    for (int16_t y = 0; y < ST7735_HEIGHT; y += 6) {
 800118c:	2300      	movs	r3, #0
 800118e:	823b      	strh	r3, [r7, #16]
 8001190:	e00f      	b.n	80011b2 <testlines+0xc2>
        ST7735_DrawLine(ST7735_WIDTH - 1, 0, 0, y, color);
 8001192:	8a3a      	ldrh	r2, [r7, #16]
 8001194:	88fb      	ldrh	r3, [r7, #6]
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	4613      	mov	r3, r2
 800119a:	2200      	movs	r2, #0
 800119c:	2100      	movs	r1, #0
 800119e:	207f      	movs	r0, #127	@ 0x7f
 80011a0:	f7ff fbf6 	bl	8000990 <ST7735_DrawLine>
        HAL_Delay(CUSTOM_DELAY);
 80011a4:	200a      	movs	r0, #10
 80011a6:	f000 fa25 	bl	80015f4 <HAL_Delay>
    for (int16_t y = 0; y < ST7735_HEIGHT; y += 6) {
 80011aa:	8a3b      	ldrh	r3, [r7, #16]
 80011ac:	3306      	adds	r3, #6
 80011ae:	b29b      	uxth	r3, r3
 80011b0:	823b      	strh	r3, [r7, #16]
 80011b2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80011b6:	2b7f      	cmp	r3, #127	@ 0x7f
 80011b8:	ddeb      	ble.n	8001192 <testlines+0xa2>
    }

    ST7735_FillScreenFast(ST7735_BLACK);
 80011ba:	2000      	movs	r0, #0
 80011bc:	f7ff fe73 	bl	8000ea6 <ST7735_FillScreenFast>
    for (int16_t x = 0; x < ST7735_WIDTH; x += 6) {
 80011c0:	2300      	movs	r3, #0
 80011c2:	81fb      	strh	r3, [r7, #14]
 80011c4:	e00e      	b.n	80011e4 <testlines+0xf4>
        ST7735_DrawLine(0, ST7735_HEIGHT - 1, x, 0, color);
 80011c6:	89fa      	ldrh	r2, [r7, #14]
 80011c8:	88fb      	ldrh	r3, [r7, #6]
 80011ca:	9300      	str	r3, [sp, #0]
 80011cc:	2300      	movs	r3, #0
 80011ce:	217f      	movs	r1, #127	@ 0x7f
 80011d0:	2000      	movs	r0, #0
 80011d2:	f7ff fbdd 	bl	8000990 <ST7735_DrawLine>
        HAL_Delay(CUSTOM_DELAY);
 80011d6:	200a      	movs	r0, #10
 80011d8:	f000 fa0c 	bl	80015f4 <HAL_Delay>
    for (int16_t x = 0; x < ST7735_WIDTH; x += 6) {
 80011dc:	89fb      	ldrh	r3, [r7, #14]
 80011de:	3306      	adds	r3, #6
 80011e0:	b29b      	uxth	r3, r3
 80011e2:	81fb      	strh	r3, [r7, #14]
 80011e4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011e8:	2b7f      	cmp	r3, #127	@ 0x7f
 80011ea:	ddec      	ble.n	80011c6 <testlines+0xd6>
    }
    for (int16_t y = 0; y < ST7735_HEIGHT; y += 6) {
 80011ec:	2300      	movs	r3, #0
 80011ee:	81bb      	strh	r3, [r7, #12]
 80011f0:	e00f      	b.n	8001212 <testlines+0x122>
        ST7735_DrawLine(0, ST7735_HEIGHT - 1, ST7735_WIDTH - 1, y, color);
 80011f2:	89ba      	ldrh	r2, [r7, #12]
 80011f4:	88fb      	ldrh	r3, [r7, #6]
 80011f6:	9300      	str	r3, [sp, #0]
 80011f8:	4613      	mov	r3, r2
 80011fa:	227f      	movs	r2, #127	@ 0x7f
 80011fc:	217f      	movs	r1, #127	@ 0x7f
 80011fe:	2000      	movs	r0, #0
 8001200:	f7ff fbc6 	bl	8000990 <ST7735_DrawLine>
        HAL_Delay(CUSTOM_DELAY);
 8001204:	200a      	movs	r0, #10
 8001206:	f000 f9f5 	bl	80015f4 <HAL_Delay>
    for (int16_t y = 0; y < ST7735_HEIGHT; y += 6) {
 800120a:	89bb      	ldrh	r3, [r7, #12]
 800120c:	3306      	adds	r3, #6
 800120e:	b29b      	uxth	r3, r3
 8001210:	81bb      	strh	r3, [r7, #12]
 8001212:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001216:	2b7f      	cmp	r3, #127	@ 0x7f
 8001218:	ddeb      	ble.n	80011f2 <testlines+0x102>
    }

    ST7735_FillScreenFast(ST7735_BLACK);
 800121a:	2000      	movs	r0, #0
 800121c:	f7ff fe43 	bl	8000ea6 <ST7735_FillScreenFast>
    for (int16_t x = 0; x < ST7735_WIDTH; x += 6) {
 8001220:	2300      	movs	r3, #0
 8001222:	817b      	strh	r3, [r7, #10]
 8001224:	e00e      	b.n	8001244 <testlines+0x154>
        ST7735_DrawLine(ST7735_WIDTH - 1, ST7735_HEIGHT - 1, x, 0, color);
 8001226:	897a      	ldrh	r2, [r7, #10]
 8001228:	88fb      	ldrh	r3, [r7, #6]
 800122a:	9300      	str	r3, [sp, #0]
 800122c:	2300      	movs	r3, #0
 800122e:	217f      	movs	r1, #127	@ 0x7f
 8001230:	207f      	movs	r0, #127	@ 0x7f
 8001232:	f7ff fbad 	bl	8000990 <ST7735_DrawLine>
        HAL_Delay(CUSTOM_DELAY);
 8001236:	200a      	movs	r0, #10
 8001238:	f000 f9dc 	bl	80015f4 <HAL_Delay>
    for (int16_t x = 0; x < ST7735_WIDTH; x += 6) {
 800123c:	897b      	ldrh	r3, [r7, #10]
 800123e:	3306      	adds	r3, #6
 8001240:	b29b      	uxth	r3, r3
 8001242:	817b      	strh	r3, [r7, #10]
 8001244:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001248:	2b7f      	cmp	r3, #127	@ 0x7f
 800124a:	ddec      	ble.n	8001226 <testlines+0x136>
    }
    for (int16_t y = 0; y < ST7735_HEIGHT; y += 6) {
 800124c:	2300      	movs	r3, #0
 800124e:	813b      	strh	r3, [r7, #8]
 8001250:	e00f      	b.n	8001272 <testlines+0x182>
        ST7735_DrawLine(ST7735_WIDTH - 1, ST7735_HEIGHT - 1, 0, y, color);
 8001252:	893a      	ldrh	r2, [r7, #8]
 8001254:	88fb      	ldrh	r3, [r7, #6]
 8001256:	9300      	str	r3, [sp, #0]
 8001258:	4613      	mov	r3, r2
 800125a:	2200      	movs	r2, #0
 800125c:	217f      	movs	r1, #127	@ 0x7f
 800125e:	207f      	movs	r0, #127	@ 0x7f
 8001260:	f7ff fb96 	bl	8000990 <ST7735_DrawLine>
        HAL_Delay(CUSTOM_DELAY);
 8001264:	200a      	movs	r0, #10
 8001266:	f000 f9c5 	bl	80015f4 <HAL_Delay>
    for (int16_t y = 0; y < ST7735_HEIGHT; y += 6) {
 800126a:	893b      	ldrh	r3, [r7, #8]
 800126c:	3306      	adds	r3, #6
 800126e:	b29b      	uxth	r3, r3
 8001270:	813b      	strh	r3, [r7, #8]
 8001272:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001276:	2b7f      	cmp	r3, #127	@ 0x7f
 8001278:	ddeb      	ble.n	8001252 <testlines+0x162>
    }
}
 800127a:	bf00      	nop
 800127c:	bf00      	nop
 800127e:	3718      	adds	r7, #24
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <testdrawrects>:

void testdrawrects(uint16_t color) {
 8001284:	b590      	push	{r4, r7, lr}
 8001286:	b087      	sub	sp, #28
 8001288:	af02      	add	r7, sp, #8
 800128a:	4603      	mov	r3, r0
 800128c:	80fb      	strh	r3, [r7, #6]
	ST7735_FillScreenFast(ST7735_BLACK);
 800128e:	2000      	movs	r0, #0
 8001290:	f7ff fe09 	bl	8000ea6 <ST7735_FillScreenFast>
	for (int16_t x=0; x < ST7735_WIDTH; x+=6) {
 8001294:	2300      	movs	r3, #0
 8001296:	81fb      	strh	r3, [r7, #14]
 8001298:	e01e      	b.n	80012d8 <testdrawrects+0x54>
		ST7735_DrawRectangle(ST7735_WIDTH/2 -x/2, ST7735_HEIGHT/2 -x/2 , x, x, color);
 800129a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800129e:	0fda      	lsrs	r2, r3, #31
 80012a0:	4413      	add	r3, r2
 80012a2:	105b      	asrs	r3, r3, #1
 80012a4:	b21b      	sxth	r3, r3
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 80012ac:	b298      	uxth	r0, r3
 80012ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012b2:	0fda      	lsrs	r2, r3, #31
 80012b4:	4413      	add	r3, r2
 80012b6:	105b      	asrs	r3, r3, #1
 80012b8:	b21b      	sxth	r3, r3
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 80012c0:	b299      	uxth	r1, r3
 80012c2:	89fa      	ldrh	r2, [r7, #14]
 80012c4:	89fc      	ldrh	r4, [r7, #14]
 80012c6:	88fb      	ldrh	r3, [r7, #6]
 80012c8:	9300      	str	r3, [sp, #0]
 80012ca:	4623      	mov	r3, r4
 80012cc:	f7ff fc8e 	bl	8000bec <ST7735_DrawRectangle>
	for (int16_t x=0; x < ST7735_WIDTH; x+=6) {
 80012d0:	89fb      	ldrh	r3, [r7, #14]
 80012d2:	3306      	adds	r3, #6
 80012d4:	b29b      	uxth	r3, r3
 80012d6:	81fb      	strh	r3, [r7, #14]
 80012d8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012dc:	2b7f      	cmp	r3, #127	@ 0x7f
 80012de:	dddc      	ble.n	800129a <testdrawrects+0x16>
	}
}
 80012e0:	bf00      	nop
 80012e2:	bf00      	nop
 80012e4:	3714      	adds	r7, #20
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd90      	pop	{r4, r7, pc}
	...

080012ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	607b      	str	r3, [r7, #4]
 80012f6:	4b10      	ldr	r3, [pc, #64]	@ (8001338 <HAL_MspInit+0x4c>)
 80012f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012fa:	4a0f      	ldr	r2, [pc, #60]	@ (8001338 <HAL_MspInit+0x4c>)
 80012fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001300:	6453      	str	r3, [r2, #68]	@ 0x44
 8001302:	4b0d      	ldr	r3, [pc, #52]	@ (8001338 <HAL_MspInit+0x4c>)
 8001304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001306:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800130a:	607b      	str	r3, [r7, #4]
 800130c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	603b      	str	r3, [r7, #0]
 8001312:	4b09      	ldr	r3, [pc, #36]	@ (8001338 <HAL_MspInit+0x4c>)
 8001314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001316:	4a08      	ldr	r2, [pc, #32]	@ (8001338 <HAL_MspInit+0x4c>)
 8001318:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800131c:	6413      	str	r3, [r2, #64]	@ 0x40
 800131e:	4b06      	ldr	r3, [pc, #24]	@ (8001338 <HAL_MspInit+0x4c>)
 8001320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001322:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001326:	603b      	str	r3, [r7, #0]
 8001328:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800132a:	bf00      	nop
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	40023800 	.word	0x40023800

0800133c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b08a      	sub	sp, #40	@ 0x28
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001344:	f107 0314 	add.w	r3, r7, #20
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	60da      	str	r2, [r3, #12]
 8001352:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a19      	ldr	r2, [pc, #100]	@ (80013c0 <HAL_SPI_MspInit+0x84>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d12b      	bne.n	80013b6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	613b      	str	r3, [r7, #16]
 8001362:	4b18      	ldr	r3, [pc, #96]	@ (80013c4 <HAL_SPI_MspInit+0x88>)
 8001364:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001366:	4a17      	ldr	r2, [pc, #92]	@ (80013c4 <HAL_SPI_MspInit+0x88>)
 8001368:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800136c:	6453      	str	r3, [r2, #68]	@ 0x44
 800136e:	4b15      	ldr	r3, [pc, #84]	@ (80013c4 <HAL_SPI_MspInit+0x88>)
 8001370:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001372:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001376:	613b      	str	r3, [r7, #16]
 8001378:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	60fb      	str	r3, [r7, #12]
 800137e:	4b11      	ldr	r3, [pc, #68]	@ (80013c4 <HAL_SPI_MspInit+0x88>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001382:	4a10      	ldr	r2, [pc, #64]	@ (80013c4 <HAL_SPI_MspInit+0x88>)
 8001384:	f043 0301 	orr.w	r3, r3, #1
 8001388:	6313      	str	r3, [r2, #48]	@ 0x30
 800138a:	4b0e      	ldr	r3, [pc, #56]	@ (80013c4 <HAL_SPI_MspInit+0x88>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138e:	f003 0301 	and.w	r3, r3, #1
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8001396:	23b0      	movs	r3, #176	@ 0xb0
 8001398:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139a:	2302      	movs	r3, #2
 800139c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a2:	2303      	movs	r3, #3
 80013a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013a6:	2305      	movs	r3, #5
 80013a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013aa:	f107 0314 	add.w	r3, r7, #20
 80013ae:	4619      	mov	r1, r3
 80013b0:	4805      	ldr	r0, [pc, #20]	@ (80013c8 <HAL_SPI_MspInit+0x8c>)
 80013b2:	f000 fa29 	bl	8001808 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80013b6:	bf00      	nop
 80013b8:	3728      	adds	r7, #40	@ 0x28
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40013000 	.word	0x40013000
 80013c4:	40023800 	.word	0x40023800
 80013c8:	40020000 	.word	0x40020000

080013cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013d0:	bf00      	nop
 80013d2:	e7fd      	b.n	80013d0 <NMI_Handler+0x4>

080013d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013d8:	bf00      	nop
 80013da:	e7fd      	b.n	80013d8 <HardFault_Handler+0x4>

080013dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013e0:	bf00      	nop
 80013e2:	e7fd      	b.n	80013e0 <MemManage_Handler+0x4>

080013e4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013e8:	bf00      	nop
 80013ea:	e7fd      	b.n	80013e8 <BusFault_Handler+0x4>

080013ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013f0:	bf00      	nop
 80013f2:	e7fd      	b.n	80013f0 <UsageFault_Handler+0x4>

080013f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013f8:	bf00      	nop
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr

08001402 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001402:	b480      	push	{r7}
 8001404:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001414:	bf00      	nop
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr

0800141e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001422:	f000 f8c7 	bl	80015b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
	...

0800142c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b086      	sub	sp, #24
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001434:	4a14      	ldr	r2, [pc, #80]	@ (8001488 <_sbrk+0x5c>)
 8001436:	4b15      	ldr	r3, [pc, #84]	@ (800148c <_sbrk+0x60>)
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001440:	4b13      	ldr	r3, [pc, #76]	@ (8001490 <_sbrk+0x64>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d102      	bne.n	800144e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001448:	4b11      	ldr	r3, [pc, #68]	@ (8001490 <_sbrk+0x64>)
 800144a:	4a12      	ldr	r2, [pc, #72]	@ (8001494 <_sbrk+0x68>)
 800144c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800144e:	4b10      	ldr	r3, [pc, #64]	@ (8001490 <_sbrk+0x64>)
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4413      	add	r3, r2
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	429a      	cmp	r2, r3
 800145a:	d207      	bcs.n	800146c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800145c:	f001 fb14 	bl	8002a88 <__errno>
 8001460:	4603      	mov	r3, r0
 8001462:	220c      	movs	r2, #12
 8001464:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001466:	f04f 33ff 	mov.w	r3, #4294967295
 800146a:	e009      	b.n	8001480 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800146c:	4b08      	ldr	r3, [pc, #32]	@ (8001490 <_sbrk+0x64>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001472:	4b07      	ldr	r3, [pc, #28]	@ (8001490 <_sbrk+0x64>)
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4413      	add	r3, r2
 800147a:	4a05      	ldr	r2, [pc, #20]	@ (8001490 <_sbrk+0x64>)
 800147c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800147e:	68fb      	ldr	r3, [r7, #12]
}
 8001480:	4618      	mov	r0, r3
 8001482:	3718      	adds	r7, #24
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	20020000 	.word	0x20020000
 800148c:	00000400 	.word	0x00000400
 8001490:	200000d8 	.word	0x200000d8
 8001494:	20000228 	.word	0x20000228

08001498 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800149c:	4b06      	ldr	r3, [pc, #24]	@ (80014b8 <SystemInit+0x20>)
 800149e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014a2:	4a05      	ldr	r2, [pc, #20]	@ (80014b8 <SystemInit+0x20>)
 80014a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014ac:	bf00      	nop
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	e000ed00 	.word	0xe000ed00

080014bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80014bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014f4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014c0:	f7ff ffea 	bl	8001498 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014c4:	480c      	ldr	r0, [pc, #48]	@ (80014f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014c6:	490d      	ldr	r1, [pc, #52]	@ (80014fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001500 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014cc:	e002      	b.n	80014d4 <LoopCopyDataInit>

080014ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014d2:	3304      	adds	r3, #4

080014d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014d8:	d3f9      	bcc.n	80014ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014da:	4a0a      	ldr	r2, [pc, #40]	@ (8001504 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014dc:	4c0a      	ldr	r4, [pc, #40]	@ (8001508 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014e0:	e001      	b.n	80014e6 <LoopFillZerobss>

080014e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014e4:	3204      	adds	r2, #4

080014e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014e8:	d3fb      	bcc.n	80014e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014ea:	f001 fad3 	bl	8002a94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014ee:	f7fe ffeb 	bl	80004c8 <main>
  bx  lr    
 80014f2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80014f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80014f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014fc:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001500:	08003510 	.word	0x08003510
  ldr r2, =_sbss
 8001504:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001508:	20000228 	.word	0x20000228

0800150c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800150c:	e7fe      	b.n	800150c <ADC_IRQHandler>
	...

08001510 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001514:	4b0e      	ldr	r3, [pc, #56]	@ (8001550 <HAL_Init+0x40>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a0d      	ldr	r2, [pc, #52]	@ (8001550 <HAL_Init+0x40>)
 800151a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800151e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001520:	4b0b      	ldr	r3, [pc, #44]	@ (8001550 <HAL_Init+0x40>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a0a      	ldr	r2, [pc, #40]	@ (8001550 <HAL_Init+0x40>)
 8001526:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800152a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800152c:	4b08      	ldr	r3, [pc, #32]	@ (8001550 <HAL_Init+0x40>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a07      	ldr	r2, [pc, #28]	@ (8001550 <HAL_Init+0x40>)
 8001532:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001536:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001538:	2003      	movs	r0, #3
 800153a:	f000 f931 	bl	80017a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800153e:	200f      	movs	r0, #15
 8001540:	f000 f808 	bl	8001554 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001544:	f7ff fed2 	bl	80012ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001548:	2300      	movs	r3, #0
}
 800154a:	4618      	mov	r0, r3
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40023c00 	.word	0x40023c00

08001554 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800155c:	4b12      	ldr	r3, [pc, #72]	@ (80015a8 <HAL_InitTick+0x54>)
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	4b12      	ldr	r3, [pc, #72]	@ (80015ac <HAL_InitTick+0x58>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	4619      	mov	r1, r3
 8001566:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800156a:	fbb3 f3f1 	udiv	r3, r3, r1
 800156e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001572:	4618      	mov	r0, r3
 8001574:	f000 f93b 	bl	80017ee <HAL_SYSTICK_Config>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e00e      	b.n	80015a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2b0f      	cmp	r3, #15
 8001586:	d80a      	bhi.n	800159e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001588:	2200      	movs	r2, #0
 800158a:	6879      	ldr	r1, [r7, #4]
 800158c:	f04f 30ff 	mov.w	r0, #4294967295
 8001590:	f000 f911 	bl	80017b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001594:	4a06      	ldr	r2, [pc, #24]	@ (80015b0 <HAL_InitTick+0x5c>)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800159a:	2300      	movs	r3, #0
 800159c:	e000      	b.n	80015a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	20000008 	.word	0x20000008
 80015ac:	20000010 	.word	0x20000010
 80015b0:	2000000c 	.word	0x2000000c

080015b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015b8:	4b06      	ldr	r3, [pc, #24]	@ (80015d4 <HAL_IncTick+0x20>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	461a      	mov	r2, r3
 80015be:	4b06      	ldr	r3, [pc, #24]	@ (80015d8 <HAL_IncTick+0x24>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4413      	add	r3, r2
 80015c4:	4a04      	ldr	r2, [pc, #16]	@ (80015d8 <HAL_IncTick+0x24>)
 80015c6:	6013      	str	r3, [r2, #0]
}
 80015c8:	bf00      	nop
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	20000010 	.word	0x20000010
 80015d8:	200000dc 	.word	0x200000dc

080015dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  return uwTick;
 80015e0:	4b03      	ldr	r3, [pc, #12]	@ (80015f0 <HAL_GetTick+0x14>)
 80015e2:	681b      	ldr	r3, [r3, #0]
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	200000dc 	.word	0x200000dc

080015f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015fc:	f7ff ffee 	bl	80015dc <HAL_GetTick>
 8001600:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800160c:	d005      	beq.n	800161a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800160e:	4b0a      	ldr	r3, [pc, #40]	@ (8001638 <HAL_Delay+0x44>)
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	461a      	mov	r2, r3
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	4413      	add	r3, r2
 8001618:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800161a:	bf00      	nop
 800161c:	f7ff ffde 	bl	80015dc <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	68fa      	ldr	r2, [r7, #12]
 8001628:	429a      	cmp	r2, r3
 800162a:	d8f7      	bhi.n	800161c <HAL_Delay+0x28>
  {
  }
}
 800162c:	bf00      	nop
 800162e:	bf00      	nop
 8001630:	3710      	adds	r7, #16
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	20000010 	.word	0x20000010

0800163c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800163c:	b480      	push	{r7}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f003 0307 	and.w	r3, r3, #7
 800164a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800164c:	4b0c      	ldr	r3, [pc, #48]	@ (8001680 <__NVIC_SetPriorityGrouping+0x44>)
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001652:	68ba      	ldr	r2, [r7, #8]
 8001654:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001658:	4013      	ands	r3, r2
 800165a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001664:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001668:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800166c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800166e:	4a04      	ldr	r2, [pc, #16]	@ (8001680 <__NVIC_SetPriorityGrouping+0x44>)
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	60d3      	str	r3, [r2, #12]
}
 8001674:	bf00      	nop
 8001676:	3714      	adds	r7, #20
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	e000ed00 	.word	0xe000ed00

08001684 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001688:	4b04      	ldr	r3, [pc, #16]	@ (800169c <__NVIC_GetPriorityGrouping+0x18>)
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	0a1b      	lsrs	r3, r3, #8
 800168e:	f003 0307 	and.w	r3, r3, #7
}
 8001692:	4618      	mov	r0, r3
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr
 800169c:	e000ed00 	.word	0xe000ed00

080016a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4603      	mov	r3, r0
 80016a8:	6039      	str	r1, [r7, #0]
 80016aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	db0a      	blt.n	80016ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	b2da      	uxtb	r2, r3
 80016b8:	490c      	ldr	r1, [pc, #48]	@ (80016ec <__NVIC_SetPriority+0x4c>)
 80016ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016be:	0112      	lsls	r2, r2, #4
 80016c0:	b2d2      	uxtb	r2, r2
 80016c2:	440b      	add	r3, r1
 80016c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016c8:	e00a      	b.n	80016e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	b2da      	uxtb	r2, r3
 80016ce:	4908      	ldr	r1, [pc, #32]	@ (80016f0 <__NVIC_SetPriority+0x50>)
 80016d0:	79fb      	ldrb	r3, [r7, #7]
 80016d2:	f003 030f 	and.w	r3, r3, #15
 80016d6:	3b04      	subs	r3, #4
 80016d8:	0112      	lsls	r2, r2, #4
 80016da:	b2d2      	uxtb	r2, r2
 80016dc:	440b      	add	r3, r1
 80016de:	761a      	strb	r2, [r3, #24]
}
 80016e0:	bf00      	nop
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	e000e100 	.word	0xe000e100
 80016f0:	e000ed00 	.word	0xe000ed00

080016f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b089      	sub	sp, #36	@ 0x24
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	60b9      	str	r1, [r7, #8]
 80016fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	f003 0307 	and.w	r3, r3, #7
 8001706:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	f1c3 0307 	rsb	r3, r3, #7
 800170e:	2b04      	cmp	r3, #4
 8001710:	bf28      	it	cs
 8001712:	2304      	movcs	r3, #4
 8001714:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	3304      	adds	r3, #4
 800171a:	2b06      	cmp	r3, #6
 800171c:	d902      	bls.n	8001724 <NVIC_EncodePriority+0x30>
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	3b03      	subs	r3, #3
 8001722:	e000      	b.n	8001726 <NVIC_EncodePriority+0x32>
 8001724:	2300      	movs	r3, #0
 8001726:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001728:	f04f 32ff 	mov.w	r2, #4294967295
 800172c:	69bb      	ldr	r3, [r7, #24]
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	43da      	mvns	r2, r3
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	401a      	ands	r2, r3
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800173c:	f04f 31ff 	mov.w	r1, #4294967295
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	fa01 f303 	lsl.w	r3, r1, r3
 8001746:	43d9      	mvns	r1, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800174c:	4313      	orrs	r3, r2
         );
}
 800174e:	4618      	mov	r0, r3
 8001750:	3724      	adds	r7, #36	@ 0x24
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
	...

0800175c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	3b01      	subs	r3, #1
 8001768:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800176c:	d301      	bcc.n	8001772 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800176e:	2301      	movs	r3, #1
 8001770:	e00f      	b.n	8001792 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001772:	4a0a      	ldr	r2, [pc, #40]	@ (800179c <SysTick_Config+0x40>)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	3b01      	subs	r3, #1
 8001778:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800177a:	210f      	movs	r1, #15
 800177c:	f04f 30ff 	mov.w	r0, #4294967295
 8001780:	f7ff ff8e 	bl	80016a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001784:	4b05      	ldr	r3, [pc, #20]	@ (800179c <SysTick_Config+0x40>)
 8001786:	2200      	movs	r2, #0
 8001788:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800178a:	4b04      	ldr	r3, [pc, #16]	@ (800179c <SysTick_Config+0x40>)
 800178c:	2207      	movs	r2, #7
 800178e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001790:	2300      	movs	r3, #0
}
 8001792:	4618      	mov	r0, r3
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	e000e010 	.word	0xe000e010

080017a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f7ff ff47 	bl	800163c <__NVIC_SetPriorityGrouping>
}
 80017ae:	bf00      	nop
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b086      	sub	sp, #24
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	4603      	mov	r3, r0
 80017be:	60b9      	str	r1, [r7, #8]
 80017c0:	607a      	str	r2, [r7, #4]
 80017c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017c4:	2300      	movs	r3, #0
 80017c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017c8:	f7ff ff5c 	bl	8001684 <__NVIC_GetPriorityGrouping>
 80017cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	68b9      	ldr	r1, [r7, #8]
 80017d2:	6978      	ldr	r0, [r7, #20]
 80017d4:	f7ff ff8e 	bl	80016f4 <NVIC_EncodePriority>
 80017d8:	4602      	mov	r2, r0
 80017da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017de:	4611      	mov	r1, r2
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff ff5d 	bl	80016a0 <__NVIC_SetPriority>
}
 80017e6:	bf00      	nop
 80017e8:	3718      	adds	r7, #24
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}

080017ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b082      	sub	sp, #8
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f7ff ffb0 	bl	800175c <SysTick_Config>
 80017fc:	4603      	mov	r3, r0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
	...

08001808 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001808:	b480      	push	{r7}
 800180a:	b089      	sub	sp, #36	@ 0x24
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001812:	2300      	movs	r3, #0
 8001814:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001816:	2300      	movs	r3, #0
 8001818:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800181a:	2300      	movs	r3, #0
 800181c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800181e:	2300      	movs	r3, #0
 8001820:	61fb      	str	r3, [r7, #28]
 8001822:	e159      	b.n	8001ad8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001824:	2201      	movs	r2, #1
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	697a      	ldr	r2, [r7, #20]
 8001834:	4013      	ands	r3, r2
 8001836:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001838:	693a      	ldr	r2, [r7, #16]
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	429a      	cmp	r2, r3
 800183e:	f040 8148 	bne.w	8001ad2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f003 0303 	and.w	r3, r3, #3
 800184a:	2b01      	cmp	r3, #1
 800184c:	d005      	beq.n	800185a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001856:	2b02      	cmp	r3, #2
 8001858:	d130      	bne.n	80018bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	2203      	movs	r2, #3
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
 800186a:	43db      	mvns	r3, r3
 800186c:	69ba      	ldr	r2, [r7, #24]
 800186e:	4013      	ands	r3, r2
 8001870:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	68da      	ldr	r2, [r3, #12]
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	4313      	orrs	r3, r2
 8001882:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	69ba      	ldr	r2, [r7, #24]
 8001888:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001890:	2201      	movs	r2, #1
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	43db      	mvns	r3, r3
 800189a:	69ba      	ldr	r2, [r7, #24]
 800189c:	4013      	ands	r3, r2
 800189e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	091b      	lsrs	r3, r3, #4
 80018a6:	f003 0201 	and.w	r2, r3, #1
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f003 0303 	and.w	r3, r3, #3
 80018c4:	2b03      	cmp	r3, #3
 80018c6:	d017      	beq.n	80018f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	2203      	movs	r2, #3
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	43db      	mvns	r3, r3
 80018da:	69ba      	ldr	r2, [r7, #24]
 80018dc:	4013      	ands	r3, r2
 80018de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	689a      	ldr	r2, [r3, #8]
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f003 0303 	and.w	r3, r3, #3
 8001900:	2b02      	cmp	r3, #2
 8001902:	d123      	bne.n	800194c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	08da      	lsrs	r2, r3, #3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	3208      	adds	r2, #8
 800190c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001910:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	f003 0307 	and.w	r3, r3, #7
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	220f      	movs	r2, #15
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	43db      	mvns	r3, r3
 8001922:	69ba      	ldr	r2, [r7, #24]
 8001924:	4013      	ands	r3, r2
 8001926:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	691a      	ldr	r2, [r3, #16]
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	f003 0307 	and.w	r3, r3, #7
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	fa02 f303 	lsl.w	r3, r2, r3
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	4313      	orrs	r3, r2
 800193c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	08da      	lsrs	r2, r3, #3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	3208      	adds	r2, #8
 8001946:	69b9      	ldr	r1, [r7, #24]
 8001948:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	2203      	movs	r2, #3
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	43db      	mvns	r3, r3
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	4013      	ands	r3, r2
 8001962:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f003 0203 	and.w	r2, r3, #3
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	4313      	orrs	r3, r2
 8001978:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001988:	2b00      	cmp	r3, #0
 800198a:	f000 80a2 	beq.w	8001ad2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800198e:	2300      	movs	r3, #0
 8001990:	60fb      	str	r3, [r7, #12]
 8001992:	4b57      	ldr	r3, [pc, #348]	@ (8001af0 <HAL_GPIO_Init+0x2e8>)
 8001994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001996:	4a56      	ldr	r2, [pc, #344]	@ (8001af0 <HAL_GPIO_Init+0x2e8>)
 8001998:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800199c:	6453      	str	r3, [r2, #68]	@ 0x44
 800199e:	4b54      	ldr	r3, [pc, #336]	@ (8001af0 <HAL_GPIO_Init+0x2e8>)
 80019a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019aa:	4a52      	ldr	r2, [pc, #328]	@ (8001af4 <HAL_GPIO_Init+0x2ec>)
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	089b      	lsrs	r3, r3, #2
 80019b0:	3302      	adds	r3, #2
 80019b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	f003 0303 	and.w	r3, r3, #3
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	220f      	movs	r2, #15
 80019c2:	fa02 f303 	lsl.w	r3, r2, r3
 80019c6:	43db      	mvns	r3, r3
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	4013      	ands	r3, r2
 80019cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a49      	ldr	r2, [pc, #292]	@ (8001af8 <HAL_GPIO_Init+0x2f0>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d019      	beq.n	8001a0a <HAL_GPIO_Init+0x202>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a48      	ldr	r2, [pc, #288]	@ (8001afc <HAL_GPIO_Init+0x2f4>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d013      	beq.n	8001a06 <HAL_GPIO_Init+0x1fe>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4a47      	ldr	r2, [pc, #284]	@ (8001b00 <HAL_GPIO_Init+0x2f8>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d00d      	beq.n	8001a02 <HAL_GPIO_Init+0x1fa>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4a46      	ldr	r2, [pc, #280]	@ (8001b04 <HAL_GPIO_Init+0x2fc>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d007      	beq.n	80019fe <HAL_GPIO_Init+0x1f6>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4a45      	ldr	r2, [pc, #276]	@ (8001b08 <HAL_GPIO_Init+0x300>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d101      	bne.n	80019fa <HAL_GPIO_Init+0x1f2>
 80019f6:	2304      	movs	r3, #4
 80019f8:	e008      	b.n	8001a0c <HAL_GPIO_Init+0x204>
 80019fa:	2307      	movs	r3, #7
 80019fc:	e006      	b.n	8001a0c <HAL_GPIO_Init+0x204>
 80019fe:	2303      	movs	r3, #3
 8001a00:	e004      	b.n	8001a0c <HAL_GPIO_Init+0x204>
 8001a02:	2302      	movs	r3, #2
 8001a04:	e002      	b.n	8001a0c <HAL_GPIO_Init+0x204>
 8001a06:	2301      	movs	r3, #1
 8001a08:	e000      	b.n	8001a0c <HAL_GPIO_Init+0x204>
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	69fa      	ldr	r2, [r7, #28]
 8001a0e:	f002 0203 	and.w	r2, r2, #3
 8001a12:	0092      	lsls	r2, r2, #2
 8001a14:	4093      	lsls	r3, r2
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a1c:	4935      	ldr	r1, [pc, #212]	@ (8001af4 <HAL_GPIO_Init+0x2ec>)
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	089b      	lsrs	r3, r3, #2
 8001a22:	3302      	adds	r3, #2
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a2a:	4b38      	ldr	r3, [pc, #224]	@ (8001b0c <HAL_GPIO_Init+0x304>)
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	43db      	mvns	r3, r3
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	4013      	ands	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d003      	beq.n	8001a4e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001a46:	69ba      	ldr	r2, [r7, #24]
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a4e:	4a2f      	ldr	r2, [pc, #188]	@ (8001b0c <HAL_GPIO_Init+0x304>)
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a54:	4b2d      	ldr	r3, [pc, #180]	@ (8001b0c <HAL_GPIO_Init+0x304>)
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	4013      	ands	r3, r2
 8001a62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d003      	beq.n	8001a78 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a78:	4a24      	ldr	r2, [pc, #144]	@ (8001b0c <HAL_GPIO_Init+0x304>)
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a7e:	4b23      	ldr	r3, [pc, #140]	@ (8001b0c <HAL_GPIO_Init+0x304>)
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	43db      	mvns	r3, r3
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d003      	beq.n	8001aa2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001aa2:	4a1a      	ldr	r2, [pc, #104]	@ (8001b0c <HAL_GPIO_Init+0x304>)
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001aa8:	4b18      	ldr	r3, [pc, #96]	@ (8001b0c <HAL_GPIO_Init+0x304>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d003      	beq.n	8001acc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001acc:	4a0f      	ldr	r2, [pc, #60]	@ (8001b0c <HAL_GPIO_Init+0x304>)
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	61fb      	str	r3, [r7, #28]
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	2b0f      	cmp	r3, #15
 8001adc:	f67f aea2 	bls.w	8001824 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ae0:	bf00      	nop
 8001ae2:	bf00      	nop
 8001ae4:	3724      	adds	r7, #36	@ 0x24
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	40023800 	.word	0x40023800
 8001af4:	40013800 	.word	0x40013800
 8001af8:	40020000 	.word	0x40020000
 8001afc:	40020400 	.word	0x40020400
 8001b00:	40020800 	.word	0x40020800
 8001b04:	40020c00 	.word	0x40020c00
 8001b08:	40021000 	.word	0x40021000
 8001b0c:	40013c00 	.word	0x40013c00

08001b10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	460b      	mov	r3, r1
 8001b1a:	807b      	strh	r3, [r7, #2]
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b20:	787b      	ldrb	r3, [r7, #1]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d003      	beq.n	8001b2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b26:	887a      	ldrh	r2, [r7, #2]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b2c:	e003      	b.n	8001b36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b2e:	887b      	ldrh	r3, [r7, #2]
 8001b30:	041a      	lsls	r2, r3, #16
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	619a      	str	r2, [r3, #24]
}
 8001b36:	bf00      	nop
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
	...

08001b44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b086      	sub	sp, #24
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d101      	bne.n	8001b56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e267      	b.n	8002026 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d075      	beq.n	8001c4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b62:	4b88      	ldr	r3, [pc, #544]	@ (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	f003 030c 	and.w	r3, r3, #12
 8001b6a:	2b04      	cmp	r3, #4
 8001b6c:	d00c      	beq.n	8001b88 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b6e:	4b85      	ldr	r3, [pc, #532]	@ (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b76:	2b08      	cmp	r3, #8
 8001b78:	d112      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b7a:	4b82      	ldr	r3, [pc, #520]	@ (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b82:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001b86:	d10b      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b88:	4b7e      	ldr	r3, [pc, #504]	@ (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d05b      	beq.n	8001c4c <HAL_RCC_OscConfig+0x108>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d157      	bne.n	8001c4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e242      	b.n	8002026 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ba8:	d106      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x74>
 8001baa:	4b76      	ldr	r3, [pc, #472]	@ (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a75      	ldr	r2, [pc, #468]	@ (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001bb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bb4:	6013      	str	r3, [r2, #0]
 8001bb6:	e01d      	b.n	8001bf4 <HAL_RCC_OscConfig+0xb0>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001bc0:	d10c      	bne.n	8001bdc <HAL_RCC_OscConfig+0x98>
 8001bc2:	4b70      	ldr	r3, [pc, #448]	@ (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a6f      	ldr	r2, [pc, #444]	@ (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001bc8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bcc:	6013      	str	r3, [r2, #0]
 8001bce:	4b6d      	ldr	r3, [pc, #436]	@ (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a6c      	ldr	r2, [pc, #432]	@ (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001bd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bd8:	6013      	str	r3, [r2, #0]
 8001bda:	e00b      	b.n	8001bf4 <HAL_RCC_OscConfig+0xb0>
 8001bdc:	4b69      	ldr	r3, [pc, #420]	@ (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a68      	ldr	r2, [pc, #416]	@ (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001be2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001be6:	6013      	str	r3, [r2, #0]
 8001be8:	4b66      	ldr	r3, [pc, #408]	@ (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a65      	ldr	r2, [pc, #404]	@ (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001bee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bf2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d013      	beq.n	8001c24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bfc:	f7ff fcee 	bl	80015dc <HAL_GetTick>
 8001c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c02:	e008      	b.n	8001c16 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c04:	f7ff fcea 	bl	80015dc <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b64      	cmp	r3, #100	@ 0x64
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e207      	b.n	8002026 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c16:	4b5b      	ldr	r3, [pc, #364]	@ (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d0f0      	beq.n	8001c04 <HAL_RCC_OscConfig+0xc0>
 8001c22:	e014      	b.n	8001c4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c24:	f7ff fcda 	bl	80015dc <HAL_GetTick>
 8001c28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c2a:	e008      	b.n	8001c3e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c2c:	f7ff fcd6 	bl	80015dc <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	2b64      	cmp	r3, #100	@ 0x64
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e1f3      	b.n	8002026 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c3e:	4b51      	ldr	r3, [pc, #324]	@ (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1f0      	bne.n	8001c2c <HAL_RCC_OscConfig+0xe8>
 8001c4a:	e000      	b.n	8001c4e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d063      	beq.n	8001d22 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c5a:	4b4a      	ldr	r3, [pc, #296]	@ (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	f003 030c 	and.w	r3, r3, #12
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d00b      	beq.n	8001c7e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c66:	4b47      	ldr	r3, [pc, #284]	@ (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c6e:	2b08      	cmp	r3, #8
 8001c70:	d11c      	bne.n	8001cac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c72:	4b44      	ldr	r3, [pc, #272]	@ (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d116      	bne.n	8001cac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c7e:	4b41      	ldr	r3, [pc, #260]	@ (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d005      	beq.n	8001c96 <HAL_RCC_OscConfig+0x152>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d001      	beq.n	8001c96 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e1c7      	b.n	8002026 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c96:	4b3b      	ldr	r3, [pc, #236]	@ (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	691b      	ldr	r3, [r3, #16]
 8001ca2:	00db      	lsls	r3, r3, #3
 8001ca4:	4937      	ldr	r1, [pc, #220]	@ (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001caa:	e03a      	b.n	8001d22 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d020      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cb4:	4b34      	ldr	r3, [pc, #208]	@ (8001d88 <HAL_RCC_OscConfig+0x244>)
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cba:	f7ff fc8f 	bl	80015dc <HAL_GetTick>
 8001cbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cc0:	e008      	b.n	8001cd4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cc2:	f7ff fc8b 	bl	80015dc <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d901      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e1a8      	b.n	8002026 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cd4:	4b2b      	ldr	r3, [pc, #172]	@ (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0302 	and.w	r3, r3, #2
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d0f0      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ce0:	4b28      	ldr	r3, [pc, #160]	@ (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	691b      	ldr	r3, [r3, #16]
 8001cec:	00db      	lsls	r3, r3, #3
 8001cee:	4925      	ldr	r1, [pc, #148]	@ (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	600b      	str	r3, [r1, #0]
 8001cf4:	e015      	b.n	8001d22 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cf6:	4b24      	ldr	r3, [pc, #144]	@ (8001d88 <HAL_RCC_OscConfig+0x244>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cfc:	f7ff fc6e 	bl	80015dc <HAL_GetTick>
 8001d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d02:	e008      	b.n	8001d16 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d04:	f7ff fc6a 	bl	80015dc <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e187      	b.n	8002026 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d16:	4b1b      	ldr	r3, [pc, #108]	@ (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d1f0      	bne.n	8001d04 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0308 	and.w	r3, r3, #8
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d036      	beq.n	8001d9c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	695b      	ldr	r3, [r3, #20]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d016      	beq.n	8001d64 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d36:	4b15      	ldr	r3, [pc, #84]	@ (8001d8c <HAL_RCC_OscConfig+0x248>)
 8001d38:	2201      	movs	r2, #1
 8001d3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d3c:	f7ff fc4e 	bl	80015dc <HAL_GetTick>
 8001d40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d42:	e008      	b.n	8001d56 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d44:	f7ff fc4a 	bl	80015dc <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e167      	b.n	8002026 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d56:	4b0b      	ldr	r3, [pc, #44]	@ (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001d58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d0f0      	beq.n	8001d44 <HAL_RCC_OscConfig+0x200>
 8001d62:	e01b      	b.n	8001d9c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d64:	4b09      	ldr	r3, [pc, #36]	@ (8001d8c <HAL_RCC_OscConfig+0x248>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d6a:	f7ff fc37 	bl	80015dc <HAL_GetTick>
 8001d6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d70:	e00e      	b.n	8001d90 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d72:	f7ff fc33 	bl	80015dc <HAL_GetTick>
 8001d76:	4602      	mov	r2, r0
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d907      	bls.n	8001d90 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e150      	b.n	8002026 <HAL_RCC_OscConfig+0x4e2>
 8001d84:	40023800 	.word	0x40023800
 8001d88:	42470000 	.word	0x42470000
 8001d8c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d90:	4b88      	ldr	r3, [pc, #544]	@ (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001d92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d94:	f003 0302 	and.w	r3, r3, #2
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d1ea      	bne.n	8001d72 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0304 	and.w	r3, r3, #4
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f000 8097 	beq.w	8001ed8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001daa:	2300      	movs	r3, #0
 8001dac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dae:	4b81      	ldr	r3, [pc, #516]	@ (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d10f      	bne.n	8001dda <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dba:	2300      	movs	r3, #0
 8001dbc:	60bb      	str	r3, [r7, #8]
 8001dbe:	4b7d      	ldr	r3, [pc, #500]	@ (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc2:	4a7c      	ldr	r2, [pc, #496]	@ (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001dc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dca:	4b7a      	ldr	r3, [pc, #488]	@ (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dd2:	60bb      	str	r3, [r7, #8]
 8001dd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dda:	4b77      	ldr	r3, [pc, #476]	@ (8001fb8 <HAL_RCC_OscConfig+0x474>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d118      	bne.n	8001e18 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001de6:	4b74      	ldr	r3, [pc, #464]	@ (8001fb8 <HAL_RCC_OscConfig+0x474>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a73      	ldr	r2, [pc, #460]	@ (8001fb8 <HAL_RCC_OscConfig+0x474>)
 8001dec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001df0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001df2:	f7ff fbf3 	bl	80015dc <HAL_GetTick>
 8001df6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001df8:	e008      	b.n	8001e0c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dfa:	f7ff fbef 	bl	80015dc <HAL_GetTick>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d901      	bls.n	8001e0c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e10c      	b.n	8002026 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e0c:	4b6a      	ldr	r3, [pc, #424]	@ (8001fb8 <HAL_RCC_OscConfig+0x474>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d0f0      	beq.n	8001dfa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d106      	bne.n	8001e2e <HAL_RCC_OscConfig+0x2ea>
 8001e20:	4b64      	ldr	r3, [pc, #400]	@ (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001e22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e24:	4a63      	ldr	r2, [pc, #396]	@ (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001e26:	f043 0301 	orr.w	r3, r3, #1
 8001e2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e2c:	e01c      	b.n	8001e68 <HAL_RCC_OscConfig+0x324>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	2b05      	cmp	r3, #5
 8001e34:	d10c      	bne.n	8001e50 <HAL_RCC_OscConfig+0x30c>
 8001e36:	4b5f      	ldr	r3, [pc, #380]	@ (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001e38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e3a:	4a5e      	ldr	r2, [pc, #376]	@ (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001e3c:	f043 0304 	orr.w	r3, r3, #4
 8001e40:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e42:	4b5c      	ldr	r3, [pc, #368]	@ (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001e44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e46:	4a5b      	ldr	r2, [pc, #364]	@ (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001e48:	f043 0301 	orr.w	r3, r3, #1
 8001e4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e4e:	e00b      	b.n	8001e68 <HAL_RCC_OscConfig+0x324>
 8001e50:	4b58      	ldr	r3, [pc, #352]	@ (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001e52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e54:	4a57      	ldr	r2, [pc, #348]	@ (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001e56:	f023 0301 	bic.w	r3, r3, #1
 8001e5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e5c:	4b55      	ldr	r3, [pc, #340]	@ (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001e5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e60:	4a54      	ldr	r2, [pc, #336]	@ (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001e62:	f023 0304 	bic.w	r3, r3, #4
 8001e66:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d015      	beq.n	8001e9c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e70:	f7ff fbb4 	bl	80015dc <HAL_GetTick>
 8001e74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e76:	e00a      	b.n	8001e8e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e78:	f7ff fbb0 	bl	80015dc <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e0cb      	b.n	8002026 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e8e:	4b49      	ldr	r3, [pc, #292]	@ (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001e90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d0ee      	beq.n	8001e78 <HAL_RCC_OscConfig+0x334>
 8001e9a:	e014      	b.n	8001ec6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e9c:	f7ff fb9e 	bl	80015dc <HAL_GetTick>
 8001ea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ea2:	e00a      	b.n	8001eba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ea4:	f7ff fb9a 	bl	80015dc <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d901      	bls.n	8001eba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e0b5      	b.n	8002026 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eba:	4b3e      	ldr	r3, [pc, #248]	@ (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001ebc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ebe:	f003 0302 	and.w	r3, r3, #2
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d1ee      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ec6:	7dfb      	ldrb	r3, [r7, #23]
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d105      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ecc:	4b39      	ldr	r3, [pc, #228]	@ (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed0:	4a38      	ldr	r2, [pc, #224]	@ (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001ed2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ed6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	699b      	ldr	r3, [r3, #24]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	f000 80a1 	beq.w	8002024 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ee2:	4b34      	ldr	r3, [pc, #208]	@ (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f003 030c 	and.w	r3, r3, #12
 8001eea:	2b08      	cmp	r3, #8
 8001eec:	d05c      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	699b      	ldr	r3, [r3, #24]
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d141      	bne.n	8001f7a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ef6:	4b31      	ldr	r3, [pc, #196]	@ (8001fbc <HAL_RCC_OscConfig+0x478>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001efc:	f7ff fb6e 	bl	80015dc <HAL_GetTick>
 8001f00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f02:	e008      	b.n	8001f16 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f04:	f7ff fb6a 	bl	80015dc <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e087      	b.n	8002026 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f16:	4b27      	ldr	r3, [pc, #156]	@ (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d1f0      	bne.n	8001f04 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	69da      	ldr	r2, [r3, #28]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6a1b      	ldr	r3, [r3, #32]
 8001f2a:	431a      	orrs	r2, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f30:	019b      	lsls	r3, r3, #6
 8001f32:	431a      	orrs	r2, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f38:	085b      	lsrs	r3, r3, #1
 8001f3a:	3b01      	subs	r3, #1
 8001f3c:	041b      	lsls	r3, r3, #16
 8001f3e:	431a      	orrs	r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f44:	061b      	lsls	r3, r3, #24
 8001f46:	491b      	ldr	r1, [pc, #108]	@ (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f4c:	4b1b      	ldr	r3, [pc, #108]	@ (8001fbc <HAL_RCC_OscConfig+0x478>)
 8001f4e:	2201      	movs	r2, #1
 8001f50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f52:	f7ff fb43 	bl	80015dc <HAL_GetTick>
 8001f56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f58:	e008      	b.n	8001f6c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f5a:	f7ff fb3f 	bl	80015dc <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d901      	bls.n	8001f6c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e05c      	b.n	8002026 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f6c:	4b11      	ldr	r3, [pc, #68]	@ (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d0f0      	beq.n	8001f5a <HAL_RCC_OscConfig+0x416>
 8001f78:	e054      	b.n	8002024 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f7a:	4b10      	ldr	r3, [pc, #64]	@ (8001fbc <HAL_RCC_OscConfig+0x478>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f80:	f7ff fb2c 	bl	80015dc <HAL_GetTick>
 8001f84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f86:	e008      	b.n	8001f9a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f88:	f7ff fb28 	bl	80015dc <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d901      	bls.n	8001f9a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e045      	b.n	8002026 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f9a:	4b06      	ldr	r3, [pc, #24]	@ (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d1f0      	bne.n	8001f88 <HAL_RCC_OscConfig+0x444>
 8001fa6:	e03d      	b.n	8002024 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	699b      	ldr	r3, [r3, #24]
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d107      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e038      	b.n	8002026 <HAL_RCC_OscConfig+0x4e2>
 8001fb4:	40023800 	.word	0x40023800
 8001fb8:	40007000 	.word	0x40007000
 8001fbc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001fc0:	4b1b      	ldr	r3, [pc, #108]	@ (8002030 <HAL_RCC_OscConfig+0x4ec>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	699b      	ldr	r3, [r3, #24]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d028      	beq.n	8002020 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d121      	bne.n	8002020 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d11a      	bne.n	8002020 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fea:	68fa      	ldr	r2, [r7, #12]
 8001fec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001ff6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d111      	bne.n	8002020 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002006:	085b      	lsrs	r3, r3, #1
 8002008:	3b01      	subs	r3, #1
 800200a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800200c:	429a      	cmp	r2, r3
 800200e:	d107      	bne.n	8002020 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800201a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800201c:	429a      	cmp	r2, r3
 800201e:	d001      	beq.n	8002024 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e000      	b.n	8002026 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3718      	adds	r7, #24
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	40023800 	.word	0x40023800

08002034 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d101      	bne.n	8002048 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e0cc      	b.n	80021e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002048:	4b68      	ldr	r3, [pc, #416]	@ (80021ec <HAL_RCC_ClockConfig+0x1b8>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0307 	and.w	r3, r3, #7
 8002050:	683a      	ldr	r2, [r7, #0]
 8002052:	429a      	cmp	r2, r3
 8002054:	d90c      	bls.n	8002070 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002056:	4b65      	ldr	r3, [pc, #404]	@ (80021ec <HAL_RCC_ClockConfig+0x1b8>)
 8002058:	683a      	ldr	r2, [r7, #0]
 800205a:	b2d2      	uxtb	r2, r2
 800205c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800205e:	4b63      	ldr	r3, [pc, #396]	@ (80021ec <HAL_RCC_ClockConfig+0x1b8>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0307 	and.w	r3, r3, #7
 8002066:	683a      	ldr	r2, [r7, #0]
 8002068:	429a      	cmp	r2, r3
 800206a:	d001      	beq.n	8002070 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e0b8      	b.n	80021e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0302 	and.w	r3, r3, #2
 8002078:	2b00      	cmp	r3, #0
 800207a:	d020      	beq.n	80020be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0304 	and.w	r3, r3, #4
 8002084:	2b00      	cmp	r3, #0
 8002086:	d005      	beq.n	8002094 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002088:	4b59      	ldr	r3, [pc, #356]	@ (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	4a58      	ldr	r2, [pc, #352]	@ (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 800208e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002092:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0308 	and.w	r3, r3, #8
 800209c:	2b00      	cmp	r3, #0
 800209e:	d005      	beq.n	80020ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020a0:	4b53      	ldr	r3, [pc, #332]	@ (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	4a52      	ldr	r2, [pc, #328]	@ (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 80020a6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80020aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020ac:	4b50      	ldr	r3, [pc, #320]	@ (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	494d      	ldr	r1, [pc, #308]	@ (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 80020ba:	4313      	orrs	r3, r2
 80020bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d044      	beq.n	8002154 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d107      	bne.n	80020e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020d2:	4b47      	ldr	r3, [pc, #284]	@ (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d119      	bne.n	8002112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e07f      	b.n	80021e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d003      	beq.n	80020f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020ee:	2b03      	cmp	r3, #3
 80020f0:	d107      	bne.n	8002102 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020f2:	4b3f      	ldr	r3, [pc, #252]	@ (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d109      	bne.n	8002112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e06f      	b.n	80021e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002102:	4b3b      	ldr	r3, [pc, #236]	@ (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0302 	and.w	r3, r3, #2
 800210a:	2b00      	cmp	r3, #0
 800210c:	d101      	bne.n	8002112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e067      	b.n	80021e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002112:	4b37      	ldr	r3, [pc, #220]	@ (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f023 0203 	bic.w	r2, r3, #3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	4934      	ldr	r1, [pc, #208]	@ (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002120:	4313      	orrs	r3, r2
 8002122:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002124:	f7ff fa5a 	bl	80015dc <HAL_GetTick>
 8002128:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800212a:	e00a      	b.n	8002142 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800212c:	f7ff fa56 	bl	80015dc <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	f241 3288 	movw	r2, #5000	@ 0x1388
 800213a:	4293      	cmp	r3, r2
 800213c:	d901      	bls.n	8002142 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e04f      	b.n	80021e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002142:	4b2b      	ldr	r3, [pc, #172]	@ (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f003 020c 	and.w	r2, r3, #12
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	429a      	cmp	r2, r3
 8002152:	d1eb      	bne.n	800212c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002154:	4b25      	ldr	r3, [pc, #148]	@ (80021ec <HAL_RCC_ClockConfig+0x1b8>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0307 	and.w	r3, r3, #7
 800215c:	683a      	ldr	r2, [r7, #0]
 800215e:	429a      	cmp	r2, r3
 8002160:	d20c      	bcs.n	800217c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002162:	4b22      	ldr	r3, [pc, #136]	@ (80021ec <HAL_RCC_ClockConfig+0x1b8>)
 8002164:	683a      	ldr	r2, [r7, #0]
 8002166:	b2d2      	uxtb	r2, r2
 8002168:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800216a:	4b20      	ldr	r3, [pc, #128]	@ (80021ec <HAL_RCC_ClockConfig+0x1b8>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0307 	and.w	r3, r3, #7
 8002172:	683a      	ldr	r2, [r7, #0]
 8002174:	429a      	cmp	r2, r3
 8002176:	d001      	beq.n	800217c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e032      	b.n	80021e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0304 	and.w	r3, r3, #4
 8002184:	2b00      	cmp	r3, #0
 8002186:	d008      	beq.n	800219a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002188:	4b19      	ldr	r3, [pc, #100]	@ (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	4916      	ldr	r1, [pc, #88]	@ (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002196:	4313      	orrs	r3, r2
 8002198:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0308 	and.w	r3, r3, #8
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d009      	beq.n	80021ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021a6:	4b12      	ldr	r3, [pc, #72]	@ (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	00db      	lsls	r3, r3, #3
 80021b4:	490e      	ldr	r1, [pc, #56]	@ (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021ba:	f000 f821 	bl	8002200 <HAL_RCC_GetSysClockFreq>
 80021be:	4602      	mov	r2, r0
 80021c0:	4b0b      	ldr	r3, [pc, #44]	@ (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	091b      	lsrs	r3, r3, #4
 80021c6:	f003 030f 	and.w	r3, r3, #15
 80021ca:	490a      	ldr	r1, [pc, #40]	@ (80021f4 <HAL_RCC_ClockConfig+0x1c0>)
 80021cc:	5ccb      	ldrb	r3, [r1, r3]
 80021ce:	fa22 f303 	lsr.w	r3, r2, r3
 80021d2:	4a09      	ldr	r2, [pc, #36]	@ (80021f8 <HAL_RCC_ClockConfig+0x1c4>)
 80021d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80021d6:	4b09      	ldr	r3, [pc, #36]	@ (80021fc <HAL_RCC_ClockConfig+0x1c8>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4618      	mov	r0, r3
 80021dc:	f7ff f9ba 	bl	8001554 <HAL_InitTick>

  return HAL_OK;
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3710      	adds	r7, #16
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	40023c00 	.word	0x40023c00
 80021f0:	40023800 	.word	0x40023800
 80021f4:	080034f0 	.word	0x080034f0
 80021f8:	20000008 	.word	0x20000008
 80021fc:	2000000c 	.word	0x2000000c

08002200 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002200:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002204:	b090      	sub	sp, #64	@ 0x40
 8002206:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002208:	2300      	movs	r3, #0
 800220a:	637b      	str	r3, [r7, #52]	@ 0x34
 800220c:	2300      	movs	r3, #0
 800220e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002210:	2300      	movs	r3, #0
 8002212:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002214:	2300      	movs	r3, #0
 8002216:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002218:	4b59      	ldr	r3, [pc, #356]	@ (8002380 <HAL_RCC_GetSysClockFreq+0x180>)
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	f003 030c 	and.w	r3, r3, #12
 8002220:	2b08      	cmp	r3, #8
 8002222:	d00d      	beq.n	8002240 <HAL_RCC_GetSysClockFreq+0x40>
 8002224:	2b08      	cmp	r3, #8
 8002226:	f200 80a1 	bhi.w	800236c <HAL_RCC_GetSysClockFreq+0x16c>
 800222a:	2b00      	cmp	r3, #0
 800222c:	d002      	beq.n	8002234 <HAL_RCC_GetSysClockFreq+0x34>
 800222e:	2b04      	cmp	r3, #4
 8002230:	d003      	beq.n	800223a <HAL_RCC_GetSysClockFreq+0x3a>
 8002232:	e09b      	b.n	800236c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002234:	4b53      	ldr	r3, [pc, #332]	@ (8002384 <HAL_RCC_GetSysClockFreq+0x184>)
 8002236:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8002238:	e09b      	b.n	8002372 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800223a:	4b53      	ldr	r3, [pc, #332]	@ (8002388 <HAL_RCC_GetSysClockFreq+0x188>)
 800223c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800223e:	e098      	b.n	8002372 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002240:	4b4f      	ldr	r3, [pc, #316]	@ (8002380 <HAL_RCC_GetSysClockFreq+0x180>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002248:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800224a:	4b4d      	ldr	r3, [pc, #308]	@ (8002380 <HAL_RCC_GetSysClockFreq+0x180>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d028      	beq.n	80022a8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002256:	4b4a      	ldr	r3, [pc, #296]	@ (8002380 <HAL_RCC_GetSysClockFreq+0x180>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	099b      	lsrs	r3, r3, #6
 800225c:	2200      	movs	r2, #0
 800225e:	623b      	str	r3, [r7, #32]
 8002260:	627a      	str	r2, [r7, #36]	@ 0x24
 8002262:	6a3b      	ldr	r3, [r7, #32]
 8002264:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002268:	2100      	movs	r1, #0
 800226a:	4b47      	ldr	r3, [pc, #284]	@ (8002388 <HAL_RCC_GetSysClockFreq+0x188>)
 800226c:	fb03 f201 	mul.w	r2, r3, r1
 8002270:	2300      	movs	r3, #0
 8002272:	fb00 f303 	mul.w	r3, r0, r3
 8002276:	4413      	add	r3, r2
 8002278:	4a43      	ldr	r2, [pc, #268]	@ (8002388 <HAL_RCC_GetSysClockFreq+0x188>)
 800227a:	fba0 1202 	umull	r1, r2, r0, r2
 800227e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002280:	460a      	mov	r2, r1
 8002282:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002284:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002286:	4413      	add	r3, r2
 8002288:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800228a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800228c:	2200      	movs	r2, #0
 800228e:	61bb      	str	r3, [r7, #24]
 8002290:	61fa      	str	r2, [r7, #28]
 8002292:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002296:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800229a:	f7fd ff9d 	bl	80001d8 <__aeabi_uldivmod>
 800229e:	4602      	mov	r2, r0
 80022a0:	460b      	mov	r3, r1
 80022a2:	4613      	mov	r3, r2
 80022a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80022a6:	e053      	b.n	8002350 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022a8:	4b35      	ldr	r3, [pc, #212]	@ (8002380 <HAL_RCC_GetSysClockFreq+0x180>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	099b      	lsrs	r3, r3, #6
 80022ae:	2200      	movs	r2, #0
 80022b0:	613b      	str	r3, [r7, #16]
 80022b2:	617a      	str	r2, [r7, #20]
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80022ba:	f04f 0b00 	mov.w	fp, #0
 80022be:	4652      	mov	r2, sl
 80022c0:	465b      	mov	r3, fp
 80022c2:	f04f 0000 	mov.w	r0, #0
 80022c6:	f04f 0100 	mov.w	r1, #0
 80022ca:	0159      	lsls	r1, r3, #5
 80022cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022d0:	0150      	lsls	r0, r2, #5
 80022d2:	4602      	mov	r2, r0
 80022d4:	460b      	mov	r3, r1
 80022d6:	ebb2 080a 	subs.w	r8, r2, sl
 80022da:	eb63 090b 	sbc.w	r9, r3, fp
 80022de:	f04f 0200 	mov.w	r2, #0
 80022e2:	f04f 0300 	mov.w	r3, #0
 80022e6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80022ea:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80022ee:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80022f2:	ebb2 0408 	subs.w	r4, r2, r8
 80022f6:	eb63 0509 	sbc.w	r5, r3, r9
 80022fa:	f04f 0200 	mov.w	r2, #0
 80022fe:	f04f 0300 	mov.w	r3, #0
 8002302:	00eb      	lsls	r3, r5, #3
 8002304:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002308:	00e2      	lsls	r2, r4, #3
 800230a:	4614      	mov	r4, r2
 800230c:	461d      	mov	r5, r3
 800230e:	eb14 030a 	adds.w	r3, r4, sl
 8002312:	603b      	str	r3, [r7, #0]
 8002314:	eb45 030b 	adc.w	r3, r5, fp
 8002318:	607b      	str	r3, [r7, #4]
 800231a:	f04f 0200 	mov.w	r2, #0
 800231e:	f04f 0300 	mov.w	r3, #0
 8002322:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002326:	4629      	mov	r1, r5
 8002328:	028b      	lsls	r3, r1, #10
 800232a:	4621      	mov	r1, r4
 800232c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002330:	4621      	mov	r1, r4
 8002332:	028a      	lsls	r2, r1, #10
 8002334:	4610      	mov	r0, r2
 8002336:	4619      	mov	r1, r3
 8002338:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800233a:	2200      	movs	r2, #0
 800233c:	60bb      	str	r3, [r7, #8]
 800233e:	60fa      	str	r2, [r7, #12]
 8002340:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002344:	f7fd ff48 	bl	80001d8 <__aeabi_uldivmod>
 8002348:	4602      	mov	r2, r0
 800234a:	460b      	mov	r3, r1
 800234c:	4613      	mov	r3, r2
 800234e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002350:	4b0b      	ldr	r3, [pc, #44]	@ (8002380 <HAL_RCC_GetSysClockFreq+0x180>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	0c1b      	lsrs	r3, r3, #16
 8002356:	f003 0303 	and.w	r3, r3, #3
 800235a:	3301      	adds	r3, #1
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8002360:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002364:	fbb2 f3f3 	udiv	r3, r2, r3
 8002368:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800236a:	e002      	b.n	8002372 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800236c:	4b05      	ldr	r3, [pc, #20]	@ (8002384 <HAL_RCC_GetSysClockFreq+0x184>)
 800236e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002370:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002374:	4618      	mov	r0, r3
 8002376:	3740      	adds	r7, #64	@ 0x40
 8002378:	46bd      	mov	sp, r7
 800237a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800237e:	bf00      	nop
 8002380:	40023800 	.word	0x40023800
 8002384:	00f42400 	.word	0x00f42400
 8002388:	017d7840 	.word	0x017d7840

0800238c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d101      	bne.n	800239e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e07b      	b.n	8002496 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d108      	bne.n	80023b8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80023ae:	d009      	beq.n	80023c4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	61da      	str	r2, [r3, #28]
 80023b6:	e005      	b.n	80023c4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d106      	bne.n	80023e4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f7fe ffac 	bl	800133c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2202      	movs	r2, #2
 80023e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80023fa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800240c:	431a      	orrs	r2, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002416:	431a      	orrs	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	691b      	ldr	r3, [r3, #16]
 800241c:	f003 0302 	and.w	r3, r3, #2
 8002420:	431a      	orrs	r2, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	695b      	ldr	r3, [r3, #20]
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	431a      	orrs	r2, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002434:	431a      	orrs	r2, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	69db      	ldr	r3, [r3, #28]
 800243a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800243e:	431a      	orrs	r2, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a1b      	ldr	r3, [r3, #32]
 8002444:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002448:	ea42 0103 	orr.w	r1, r2, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002450:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	430a      	orrs	r2, r1
 800245a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	699b      	ldr	r3, [r3, #24]
 8002460:	0c1b      	lsrs	r3, r3, #16
 8002462:	f003 0104 	and.w	r1, r3, #4
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800246a:	f003 0210 	and.w	r2, r3, #16
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	430a      	orrs	r2, r1
 8002474:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	69da      	ldr	r2, [r3, #28]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002484:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002494:	2300      	movs	r3, #0
}
 8002496:	4618      	mov	r0, r3
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800249e:	b580      	push	{r7, lr}
 80024a0:	b088      	sub	sp, #32
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	60f8      	str	r0, [r7, #12]
 80024a6:	60b9      	str	r1, [r7, #8]
 80024a8:	603b      	str	r3, [r7, #0]
 80024aa:	4613      	mov	r3, r2
 80024ac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80024ae:	2300      	movs	r3, #0
 80024b0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d101      	bne.n	80024c0 <HAL_SPI_Transmit+0x22>
 80024bc:	2302      	movs	r3, #2
 80024be:	e12d      	b.n	800271c <HAL_SPI_Transmit+0x27e>
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80024c8:	f7ff f888 	bl	80015dc <HAL_GetTick>
 80024cc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80024ce:	88fb      	ldrh	r3, [r7, #6]
 80024d0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d002      	beq.n	80024e4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80024de:	2302      	movs	r3, #2
 80024e0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80024e2:	e116      	b.n	8002712 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d002      	beq.n	80024f0 <HAL_SPI_Transmit+0x52>
 80024ea:	88fb      	ldrh	r3, [r7, #6]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d102      	bne.n	80024f6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80024f4:	e10d      	b.n	8002712 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2203      	movs	r2, #3
 80024fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2200      	movs	r2, #0
 8002502:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	68ba      	ldr	r2, [r7, #8]
 8002508:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	88fa      	ldrh	r2, [r7, #6]
 800250e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	88fa      	ldrh	r2, [r7, #6]
 8002514:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2200      	movs	r2, #0
 800251a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2200      	movs	r2, #0
 8002520:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2200      	movs	r2, #0
 8002526:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2200      	movs	r2, #0
 800252c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2200      	movs	r2, #0
 8002532:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800253c:	d10f      	bne.n	800255e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800254c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800255c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002568:	2b40      	cmp	r3, #64	@ 0x40
 800256a:	d007      	beq.n	800257c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800257a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002584:	d14f      	bne.n	8002626 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d002      	beq.n	8002594 <HAL_SPI_Transmit+0xf6>
 800258e:	8afb      	ldrh	r3, [r7, #22]
 8002590:	2b01      	cmp	r3, #1
 8002592:	d142      	bne.n	800261a <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002598:	881a      	ldrh	r2, [r3, #0]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025a4:	1c9a      	adds	r2, r3, #2
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	3b01      	subs	r3, #1
 80025b2:	b29a      	uxth	r2, r3
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80025b8:	e02f      	b.n	800261a <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	f003 0302 	and.w	r3, r3, #2
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d112      	bne.n	80025ee <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025cc:	881a      	ldrh	r2, [r3, #0]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d8:	1c9a      	adds	r2, r3, #2
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	3b01      	subs	r3, #1
 80025e6:	b29a      	uxth	r2, r3
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	86da      	strh	r2, [r3, #54]	@ 0x36
 80025ec:	e015      	b.n	800261a <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80025ee:	f7fe fff5 	bl	80015dc <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	683a      	ldr	r2, [r7, #0]
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d803      	bhi.n	8002606 <HAL_SPI_Transmit+0x168>
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002604:	d102      	bne.n	800260c <HAL_SPI_Transmit+0x16e>
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d106      	bne.n	800261a <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2201      	movs	r2, #1
 8002614:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002618:	e07b      	b.n	8002712 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800261e:	b29b      	uxth	r3, r3
 8002620:	2b00      	cmp	r3, #0
 8002622:	d1ca      	bne.n	80025ba <HAL_SPI_Transmit+0x11c>
 8002624:	e050      	b.n	80026c8 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d002      	beq.n	8002634 <HAL_SPI_Transmit+0x196>
 800262e:	8afb      	ldrh	r3, [r7, #22]
 8002630:	2b01      	cmp	r3, #1
 8002632:	d144      	bne.n	80026be <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	330c      	adds	r3, #12
 800263e:	7812      	ldrb	r2, [r2, #0]
 8002640:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002646:	1c5a      	adds	r2, r3, #1
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002650:	b29b      	uxth	r3, r3
 8002652:	3b01      	subs	r3, #1
 8002654:	b29a      	uxth	r2, r3
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800265a:	e030      	b.n	80026be <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f003 0302 	and.w	r3, r3, #2
 8002666:	2b02      	cmp	r3, #2
 8002668:	d113      	bne.n	8002692 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	330c      	adds	r3, #12
 8002674:	7812      	ldrb	r2, [r2, #0]
 8002676:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800267c:	1c5a      	adds	r2, r3, #1
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002686:	b29b      	uxth	r3, r3
 8002688:	3b01      	subs	r3, #1
 800268a:	b29a      	uxth	r2, r3
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002690:	e015      	b.n	80026be <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002692:	f7fe ffa3 	bl	80015dc <HAL_GetTick>
 8002696:	4602      	mov	r2, r0
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	683a      	ldr	r2, [r7, #0]
 800269e:	429a      	cmp	r2, r3
 80026a0:	d803      	bhi.n	80026aa <HAL_SPI_Transmit+0x20c>
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026a8:	d102      	bne.n	80026b0 <HAL_SPI_Transmit+0x212>
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d106      	bne.n	80026be <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80026bc:	e029      	b.n	8002712 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d1c9      	bne.n	800265c <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	6839      	ldr	r1, [r7, #0]
 80026cc:	68f8      	ldr	r0, [r7, #12]
 80026ce:	f000 f8b1 	bl	8002834 <SPI_EndRxTxTransaction>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d002      	beq.n	80026de <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2220      	movs	r2, #32
 80026dc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d10a      	bne.n	80026fc <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80026e6:	2300      	movs	r3, #0
 80026e8:	613b      	str	r3, [r7, #16]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	613b      	str	r3, [r7, #16]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	613b      	str	r3, [r7, #16]
 80026fa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002700:	2b00      	cmp	r3, #0
 8002702:	d002      	beq.n	800270a <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	77fb      	strb	r3, [r7, #31]
 8002708:	e003      	b.n	8002712 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2201      	movs	r2, #1
 800270e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2200      	movs	r2, #0
 8002716:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800271a:	7ffb      	ldrb	r3, [r7, #31]
}
 800271c:	4618      	mov	r0, r3
 800271e:	3720      	adds	r7, #32
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b088      	sub	sp, #32
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	603b      	str	r3, [r7, #0]
 8002730:	4613      	mov	r3, r2
 8002732:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002734:	f7fe ff52 	bl	80015dc <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800273c:	1a9b      	subs	r3, r3, r2
 800273e:	683a      	ldr	r2, [r7, #0]
 8002740:	4413      	add	r3, r2
 8002742:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002744:	f7fe ff4a 	bl	80015dc <HAL_GetTick>
 8002748:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800274a:	4b39      	ldr	r3, [pc, #228]	@ (8002830 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	015b      	lsls	r3, r3, #5
 8002750:	0d1b      	lsrs	r3, r3, #20
 8002752:	69fa      	ldr	r2, [r7, #28]
 8002754:	fb02 f303 	mul.w	r3, r2, r3
 8002758:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800275a:	e054      	b.n	8002806 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002762:	d050      	beq.n	8002806 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002764:	f7fe ff3a 	bl	80015dc <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	69fa      	ldr	r2, [r7, #28]
 8002770:	429a      	cmp	r2, r3
 8002772:	d902      	bls.n	800277a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d13d      	bne.n	80027f6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	685a      	ldr	r2, [r3, #4]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002788:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002792:	d111      	bne.n	80027b8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800279c:	d004      	beq.n	80027a8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027a6:	d107      	bne.n	80027b8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80027b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80027c0:	d10f      	bne.n	80027e2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80027d0:	601a      	str	r2, [r3, #0]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80027e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2201      	movs	r2, #1
 80027e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e017      	b.n	8002826 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d101      	bne.n	8002800 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80027fc:	2300      	movs	r3, #0
 80027fe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	3b01      	subs	r3, #1
 8002804:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	689a      	ldr	r2, [r3, #8]
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	4013      	ands	r3, r2
 8002810:	68ba      	ldr	r2, [r7, #8]
 8002812:	429a      	cmp	r2, r3
 8002814:	bf0c      	ite	eq
 8002816:	2301      	moveq	r3, #1
 8002818:	2300      	movne	r3, #0
 800281a:	b2db      	uxtb	r3, r3
 800281c:	461a      	mov	r2, r3
 800281e:	79fb      	ldrb	r3, [r7, #7]
 8002820:	429a      	cmp	r2, r3
 8002822:	d19b      	bne.n	800275c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002824:	2300      	movs	r3, #0
}
 8002826:	4618      	mov	r0, r3
 8002828:	3720      	adds	r7, #32
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	20000008 	.word	0x20000008

08002834 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b088      	sub	sp, #32
 8002838:	af02      	add	r7, sp, #8
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	60b9      	str	r1, [r7, #8]
 800283e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	9300      	str	r3, [sp, #0]
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	2201      	movs	r2, #1
 8002848:	2102      	movs	r1, #2
 800284a:	68f8      	ldr	r0, [r7, #12]
 800284c:	f7ff ff6a 	bl	8002724 <SPI_WaitFlagStateUntilTimeout>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d007      	beq.n	8002866 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800285a:	f043 0220 	orr.w	r2, r3, #32
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e032      	b.n	80028cc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002866:	4b1b      	ldr	r3, [pc, #108]	@ (80028d4 <SPI_EndRxTxTransaction+0xa0>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a1b      	ldr	r2, [pc, #108]	@ (80028d8 <SPI_EndRxTxTransaction+0xa4>)
 800286c:	fba2 2303 	umull	r2, r3, r2, r3
 8002870:	0d5b      	lsrs	r3, r3, #21
 8002872:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002876:	fb02 f303 	mul.w	r3, r2, r3
 800287a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002884:	d112      	bne.n	80028ac <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	9300      	str	r3, [sp, #0]
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	2200      	movs	r2, #0
 800288e:	2180      	movs	r1, #128	@ 0x80
 8002890:	68f8      	ldr	r0, [r7, #12]
 8002892:	f7ff ff47 	bl	8002724 <SPI_WaitFlagStateUntilTimeout>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d016      	beq.n	80028ca <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028a0:	f043 0220 	orr.w	r2, r3, #32
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	e00f      	b.n	80028cc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d00a      	beq.n	80028c8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	3b01      	subs	r3, #1
 80028b6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028c2:	2b80      	cmp	r3, #128	@ 0x80
 80028c4:	d0f2      	beq.n	80028ac <SPI_EndRxTxTransaction+0x78>
 80028c6:	e000      	b.n	80028ca <SPI_EndRxTxTransaction+0x96>
        break;
 80028c8:	bf00      	nop
  }

  return HAL_OK;
 80028ca:	2300      	movs	r3, #0
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3718      	adds	r7, #24
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	20000008 	.word	0x20000008
 80028d8:	165e9f81 	.word	0x165e9f81

080028dc <malloc>:
 80028dc:	4b02      	ldr	r3, [pc, #8]	@ (80028e8 <malloc+0xc>)
 80028de:	4601      	mov	r1, r0
 80028e0:	6818      	ldr	r0, [r3, #0]
 80028e2:	f000 b82d 	b.w	8002940 <_malloc_r>
 80028e6:	bf00      	nop
 80028e8:	20000014 	.word	0x20000014

080028ec <free>:
 80028ec:	4b02      	ldr	r3, [pc, #8]	@ (80028f8 <free+0xc>)
 80028ee:	4601      	mov	r1, r0
 80028f0:	6818      	ldr	r0, [r3, #0]
 80028f2:	f000 b8f5 	b.w	8002ae0 <_free_r>
 80028f6:	bf00      	nop
 80028f8:	20000014 	.word	0x20000014

080028fc <sbrk_aligned>:
 80028fc:	b570      	push	{r4, r5, r6, lr}
 80028fe:	4e0f      	ldr	r6, [pc, #60]	@ (800293c <sbrk_aligned+0x40>)
 8002900:	460c      	mov	r4, r1
 8002902:	6831      	ldr	r1, [r6, #0]
 8002904:	4605      	mov	r5, r0
 8002906:	b911      	cbnz	r1, 800290e <sbrk_aligned+0x12>
 8002908:	f000 f8ae 	bl	8002a68 <_sbrk_r>
 800290c:	6030      	str	r0, [r6, #0]
 800290e:	4621      	mov	r1, r4
 8002910:	4628      	mov	r0, r5
 8002912:	f000 f8a9 	bl	8002a68 <_sbrk_r>
 8002916:	1c43      	adds	r3, r0, #1
 8002918:	d103      	bne.n	8002922 <sbrk_aligned+0x26>
 800291a:	f04f 34ff 	mov.w	r4, #4294967295
 800291e:	4620      	mov	r0, r4
 8002920:	bd70      	pop	{r4, r5, r6, pc}
 8002922:	1cc4      	adds	r4, r0, #3
 8002924:	f024 0403 	bic.w	r4, r4, #3
 8002928:	42a0      	cmp	r0, r4
 800292a:	d0f8      	beq.n	800291e <sbrk_aligned+0x22>
 800292c:	1a21      	subs	r1, r4, r0
 800292e:	4628      	mov	r0, r5
 8002930:	f000 f89a 	bl	8002a68 <_sbrk_r>
 8002934:	3001      	adds	r0, #1
 8002936:	d1f2      	bne.n	800291e <sbrk_aligned+0x22>
 8002938:	e7ef      	b.n	800291a <sbrk_aligned+0x1e>
 800293a:	bf00      	nop
 800293c:	200000e0 	.word	0x200000e0

08002940 <_malloc_r>:
 8002940:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002944:	1ccd      	adds	r5, r1, #3
 8002946:	f025 0503 	bic.w	r5, r5, #3
 800294a:	3508      	adds	r5, #8
 800294c:	2d0c      	cmp	r5, #12
 800294e:	bf38      	it	cc
 8002950:	250c      	movcc	r5, #12
 8002952:	2d00      	cmp	r5, #0
 8002954:	4606      	mov	r6, r0
 8002956:	db01      	blt.n	800295c <_malloc_r+0x1c>
 8002958:	42a9      	cmp	r1, r5
 800295a:	d904      	bls.n	8002966 <_malloc_r+0x26>
 800295c:	230c      	movs	r3, #12
 800295e:	6033      	str	r3, [r6, #0]
 8002960:	2000      	movs	r0, #0
 8002962:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002966:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002a3c <_malloc_r+0xfc>
 800296a:	f000 f869 	bl	8002a40 <__malloc_lock>
 800296e:	f8d8 3000 	ldr.w	r3, [r8]
 8002972:	461c      	mov	r4, r3
 8002974:	bb44      	cbnz	r4, 80029c8 <_malloc_r+0x88>
 8002976:	4629      	mov	r1, r5
 8002978:	4630      	mov	r0, r6
 800297a:	f7ff ffbf 	bl	80028fc <sbrk_aligned>
 800297e:	1c43      	adds	r3, r0, #1
 8002980:	4604      	mov	r4, r0
 8002982:	d158      	bne.n	8002a36 <_malloc_r+0xf6>
 8002984:	f8d8 4000 	ldr.w	r4, [r8]
 8002988:	4627      	mov	r7, r4
 800298a:	2f00      	cmp	r7, #0
 800298c:	d143      	bne.n	8002a16 <_malloc_r+0xd6>
 800298e:	2c00      	cmp	r4, #0
 8002990:	d04b      	beq.n	8002a2a <_malloc_r+0xea>
 8002992:	6823      	ldr	r3, [r4, #0]
 8002994:	4639      	mov	r1, r7
 8002996:	4630      	mov	r0, r6
 8002998:	eb04 0903 	add.w	r9, r4, r3
 800299c:	f000 f864 	bl	8002a68 <_sbrk_r>
 80029a0:	4581      	cmp	r9, r0
 80029a2:	d142      	bne.n	8002a2a <_malloc_r+0xea>
 80029a4:	6821      	ldr	r1, [r4, #0]
 80029a6:	1a6d      	subs	r5, r5, r1
 80029a8:	4629      	mov	r1, r5
 80029aa:	4630      	mov	r0, r6
 80029ac:	f7ff ffa6 	bl	80028fc <sbrk_aligned>
 80029b0:	3001      	adds	r0, #1
 80029b2:	d03a      	beq.n	8002a2a <_malloc_r+0xea>
 80029b4:	6823      	ldr	r3, [r4, #0]
 80029b6:	442b      	add	r3, r5
 80029b8:	6023      	str	r3, [r4, #0]
 80029ba:	f8d8 3000 	ldr.w	r3, [r8]
 80029be:	685a      	ldr	r2, [r3, #4]
 80029c0:	bb62      	cbnz	r2, 8002a1c <_malloc_r+0xdc>
 80029c2:	f8c8 7000 	str.w	r7, [r8]
 80029c6:	e00f      	b.n	80029e8 <_malloc_r+0xa8>
 80029c8:	6822      	ldr	r2, [r4, #0]
 80029ca:	1b52      	subs	r2, r2, r5
 80029cc:	d420      	bmi.n	8002a10 <_malloc_r+0xd0>
 80029ce:	2a0b      	cmp	r2, #11
 80029d0:	d917      	bls.n	8002a02 <_malloc_r+0xc2>
 80029d2:	1961      	adds	r1, r4, r5
 80029d4:	42a3      	cmp	r3, r4
 80029d6:	6025      	str	r5, [r4, #0]
 80029d8:	bf18      	it	ne
 80029da:	6059      	strne	r1, [r3, #4]
 80029dc:	6863      	ldr	r3, [r4, #4]
 80029de:	bf08      	it	eq
 80029e0:	f8c8 1000 	streq.w	r1, [r8]
 80029e4:	5162      	str	r2, [r4, r5]
 80029e6:	604b      	str	r3, [r1, #4]
 80029e8:	4630      	mov	r0, r6
 80029ea:	f000 f82f 	bl	8002a4c <__malloc_unlock>
 80029ee:	f104 000b 	add.w	r0, r4, #11
 80029f2:	1d23      	adds	r3, r4, #4
 80029f4:	f020 0007 	bic.w	r0, r0, #7
 80029f8:	1ac2      	subs	r2, r0, r3
 80029fa:	bf1c      	itt	ne
 80029fc:	1a1b      	subne	r3, r3, r0
 80029fe:	50a3      	strne	r3, [r4, r2]
 8002a00:	e7af      	b.n	8002962 <_malloc_r+0x22>
 8002a02:	6862      	ldr	r2, [r4, #4]
 8002a04:	42a3      	cmp	r3, r4
 8002a06:	bf0c      	ite	eq
 8002a08:	f8c8 2000 	streq.w	r2, [r8]
 8002a0c:	605a      	strne	r2, [r3, #4]
 8002a0e:	e7eb      	b.n	80029e8 <_malloc_r+0xa8>
 8002a10:	4623      	mov	r3, r4
 8002a12:	6864      	ldr	r4, [r4, #4]
 8002a14:	e7ae      	b.n	8002974 <_malloc_r+0x34>
 8002a16:	463c      	mov	r4, r7
 8002a18:	687f      	ldr	r7, [r7, #4]
 8002a1a:	e7b6      	b.n	800298a <_malloc_r+0x4a>
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	42a3      	cmp	r3, r4
 8002a22:	d1fb      	bne.n	8002a1c <_malloc_r+0xdc>
 8002a24:	2300      	movs	r3, #0
 8002a26:	6053      	str	r3, [r2, #4]
 8002a28:	e7de      	b.n	80029e8 <_malloc_r+0xa8>
 8002a2a:	230c      	movs	r3, #12
 8002a2c:	6033      	str	r3, [r6, #0]
 8002a2e:	4630      	mov	r0, r6
 8002a30:	f000 f80c 	bl	8002a4c <__malloc_unlock>
 8002a34:	e794      	b.n	8002960 <_malloc_r+0x20>
 8002a36:	6005      	str	r5, [r0, #0]
 8002a38:	e7d6      	b.n	80029e8 <_malloc_r+0xa8>
 8002a3a:	bf00      	nop
 8002a3c:	200000e4 	.word	0x200000e4

08002a40 <__malloc_lock>:
 8002a40:	4801      	ldr	r0, [pc, #4]	@ (8002a48 <__malloc_lock+0x8>)
 8002a42:	f000 b84b 	b.w	8002adc <__retarget_lock_acquire_recursive>
 8002a46:	bf00      	nop
 8002a48:	20000224 	.word	0x20000224

08002a4c <__malloc_unlock>:
 8002a4c:	4801      	ldr	r0, [pc, #4]	@ (8002a54 <__malloc_unlock+0x8>)
 8002a4e:	f000 b846 	b.w	8002ade <__retarget_lock_release_recursive>
 8002a52:	bf00      	nop
 8002a54:	20000224 	.word	0x20000224

08002a58 <memset>:
 8002a58:	4402      	add	r2, r0
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d100      	bne.n	8002a62 <memset+0xa>
 8002a60:	4770      	bx	lr
 8002a62:	f803 1b01 	strb.w	r1, [r3], #1
 8002a66:	e7f9      	b.n	8002a5c <memset+0x4>

08002a68 <_sbrk_r>:
 8002a68:	b538      	push	{r3, r4, r5, lr}
 8002a6a:	4d06      	ldr	r5, [pc, #24]	@ (8002a84 <_sbrk_r+0x1c>)
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	4604      	mov	r4, r0
 8002a70:	4608      	mov	r0, r1
 8002a72:	602b      	str	r3, [r5, #0]
 8002a74:	f7fe fcda 	bl	800142c <_sbrk>
 8002a78:	1c43      	adds	r3, r0, #1
 8002a7a:	d102      	bne.n	8002a82 <_sbrk_r+0x1a>
 8002a7c:	682b      	ldr	r3, [r5, #0]
 8002a7e:	b103      	cbz	r3, 8002a82 <_sbrk_r+0x1a>
 8002a80:	6023      	str	r3, [r4, #0]
 8002a82:	bd38      	pop	{r3, r4, r5, pc}
 8002a84:	20000220 	.word	0x20000220

08002a88 <__errno>:
 8002a88:	4b01      	ldr	r3, [pc, #4]	@ (8002a90 <__errno+0x8>)
 8002a8a:	6818      	ldr	r0, [r3, #0]
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	20000014 	.word	0x20000014

08002a94 <__libc_init_array>:
 8002a94:	b570      	push	{r4, r5, r6, lr}
 8002a96:	4d0d      	ldr	r5, [pc, #52]	@ (8002acc <__libc_init_array+0x38>)
 8002a98:	4c0d      	ldr	r4, [pc, #52]	@ (8002ad0 <__libc_init_array+0x3c>)
 8002a9a:	1b64      	subs	r4, r4, r5
 8002a9c:	10a4      	asrs	r4, r4, #2
 8002a9e:	2600      	movs	r6, #0
 8002aa0:	42a6      	cmp	r6, r4
 8002aa2:	d109      	bne.n	8002ab8 <__libc_init_array+0x24>
 8002aa4:	4d0b      	ldr	r5, [pc, #44]	@ (8002ad4 <__libc_init_array+0x40>)
 8002aa6:	4c0c      	ldr	r4, [pc, #48]	@ (8002ad8 <__libc_init_array+0x44>)
 8002aa8:	f000 f864 	bl	8002b74 <_init>
 8002aac:	1b64      	subs	r4, r4, r5
 8002aae:	10a4      	asrs	r4, r4, #2
 8002ab0:	2600      	movs	r6, #0
 8002ab2:	42a6      	cmp	r6, r4
 8002ab4:	d105      	bne.n	8002ac2 <__libc_init_array+0x2e>
 8002ab6:	bd70      	pop	{r4, r5, r6, pc}
 8002ab8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002abc:	4798      	blx	r3
 8002abe:	3601      	adds	r6, #1
 8002ac0:	e7ee      	b.n	8002aa0 <__libc_init_array+0xc>
 8002ac2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ac6:	4798      	blx	r3
 8002ac8:	3601      	adds	r6, #1
 8002aca:	e7f2      	b.n	8002ab2 <__libc_init_array+0x1e>
 8002acc:	08003508 	.word	0x08003508
 8002ad0:	08003508 	.word	0x08003508
 8002ad4:	08003508 	.word	0x08003508
 8002ad8:	0800350c 	.word	0x0800350c

08002adc <__retarget_lock_acquire_recursive>:
 8002adc:	4770      	bx	lr

08002ade <__retarget_lock_release_recursive>:
 8002ade:	4770      	bx	lr

08002ae0 <_free_r>:
 8002ae0:	b538      	push	{r3, r4, r5, lr}
 8002ae2:	4605      	mov	r5, r0
 8002ae4:	2900      	cmp	r1, #0
 8002ae6:	d041      	beq.n	8002b6c <_free_r+0x8c>
 8002ae8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002aec:	1f0c      	subs	r4, r1, #4
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	bfb8      	it	lt
 8002af2:	18e4      	addlt	r4, r4, r3
 8002af4:	f7ff ffa4 	bl	8002a40 <__malloc_lock>
 8002af8:	4a1d      	ldr	r2, [pc, #116]	@ (8002b70 <_free_r+0x90>)
 8002afa:	6813      	ldr	r3, [r2, #0]
 8002afc:	b933      	cbnz	r3, 8002b0c <_free_r+0x2c>
 8002afe:	6063      	str	r3, [r4, #4]
 8002b00:	6014      	str	r4, [r2, #0]
 8002b02:	4628      	mov	r0, r5
 8002b04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002b08:	f7ff bfa0 	b.w	8002a4c <__malloc_unlock>
 8002b0c:	42a3      	cmp	r3, r4
 8002b0e:	d908      	bls.n	8002b22 <_free_r+0x42>
 8002b10:	6820      	ldr	r0, [r4, #0]
 8002b12:	1821      	adds	r1, r4, r0
 8002b14:	428b      	cmp	r3, r1
 8002b16:	bf01      	itttt	eq
 8002b18:	6819      	ldreq	r1, [r3, #0]
 8002b1a:	685b      	ldreq	r3, [r3, #4]
 8002b1c:	1809      	addeq	r1, r1, r0
 8002b1e:	6021      	streq	r1, [r4, #0]
 8002b20:	e7ed      	b.n	8002afe <_free_r+0x1e>
 8002b22:	461a      	mov	r2, r3
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	b10b      	cbz	r3, 8002b2c <_free_r+0x4c>
 8002b28:	42a3      	cmp	r3, r4
 8002b2a:	d9fa      	bls.n	8002b22 <_free_r+0x42>
 8002b2c:	6811      	ldr	r1, [r2, #0]
 8002b2e:	1850      	adds	r0, r2, r1
 8002b30:	42a0      	cmp	r0, r4
 8002b32:	d10b      	bne.n	8002b4c <_free_r+0x6c>
 8002b34:	6820      	ldr	r0, [r4, #0]
 8002b36:	4401      	add	r1, r0
 8002b38:	1850      	adds	r0, r2, r1
 8002b3a:	4283      	cmp	r3, r0
 8002b3c:	6011      	str	r1, [r2, #0]
 8002b3e:	d1e0      	bne.n	8002b02 <_free_r+0x22>
 8002b40:	6818      	ldr	r0, [r3, #0]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	6053      	str	r3, [r2, #4]
 8002b46:	4408      	add	r0, r1
 8002b48:	6010      	str	r0, [r2, #0]
 8002b4a:	e7da      	b.n	8002b02 <_free_r+0x22>
 8002b4c:	d902      	bls.n	8002b54 <_free_r+0x74>
 8002b4e:	230c      	movs	r3, #12
 8002b50:	602b      	str	r3, [r5, #0]
 8002b52:	e7d6      	b.n	8002b02 <_free_r+0x22>
 8002b54:	6820      	ldr	r0, [r4, #0]
 8002b56:	1821      	adds	r1, r4, r0
 8002b58:	428b      	cmp	r3, r1
 8002b5a:	bf04      	itt	eq
 8002b5c:	6819      	ldreq	r1, [r3, #0]
 8002b5e:	685b      	ldreq	r3, [r3, #4]
 8002b60:	6063      	str	r3, [r4, #4]
 8002b62:	bf04      	itt	eq
 8002b64:	1809      	addeq	r1, r1, r0
 8002b66:	6021      	streq	r1, [r4, #0]
 8002b68:	6054      	str	r4, [r2, #4]
 8002b6a:	e7ca      	b.n	8002b02 <_free_r+0x22>
 8002b6c:	bd38      	pop	{r3, r4, r5, pc}
 8002b6e:	bf00      	nop
 8002b70:	200000e4 	.word	0x200000e4

08002b74 <_init>:
 8002b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b76:	bf00      	nop
 8002b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b7a:	bc08      	pop	{r3}
 8002b7c:	469e      	mov	lr, r3
 8002b7e:	4770      	bx	lr

08002b80 <_fini>:
 8002b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b82:	bf00      	nop
 8002b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b86:	bc08      	pop	{r3}
 8002b88:	469e      	mov	lr, r3
 8002b8a:	4770      	bx	lr
